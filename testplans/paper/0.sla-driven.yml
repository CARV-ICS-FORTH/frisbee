---
apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: tikv-baseline
spec:
  withTelemetry:
    importMonitors: [ "platform.telemetry.container", "ycsb.telemetry.client", "tikv.telemetry.pd", "tikv.telemetry.worker" ]

  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: master
      service:
        templateRef: tikv.cluster.placement-driver

    - action: Cluster
      depends: { running: [ master ] }
      name: workers
      cluster:
        templateRef: tikv.cluster.worker
        instances: 100
        until:
          sla: 'MAX() OF QUERY(A2EjFbsMk/88/99Latency, 1m, now) IS ABOVE(70000)'
        inputs:
          - { placementDriver: .service.master.any }

    # Preload-key
    - action: Cluster
      depends: { running: [ master ] }
      name: loaders
      cluster:
          templateRef: tikv.cluster.worker
          instances: 1
          inputs:
            - { server: .service.master.any, workload: workloada, recordcount: "1000000", threads: "400" }


    - action: Cluster
      depends: { running: [ master ], success: [loaders] }
      name: runners
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 400 # Set max instances to bound the experiment from scaling indefinitely
        until:
          sla: 'MAX() OF QUERY(A2EjFbsMk/88/99Latency, 1m, now) IS ABOVE(70000)'
        inputs:
          - { server: .service.master.any, workload: workloada, recordcount: "1000000", threads: "10" }
          - { server: .service.master.any, workload: workloadd, recordcount: "1000000", threads: "10" }
          - { server: .service.master.any, workload: workloada, recordcount: "1000000", threads: "10" }
          - { server: .service.master.any, workload: workloadd, recordcount: "1000000", threads: "10" }
        schedule:
          cron: "@every 1m"
        tolerate:
          failedServices: 5

    # If there is a violation, we need to remove the latest client in order to come into the latest stable state.
    #- action: Kill