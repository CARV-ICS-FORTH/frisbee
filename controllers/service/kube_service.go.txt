package create

import (
	"context"

	frisbee "github.com/fnikolai/frisbee/api/v1alpha1"
	"github.com/fnikolai/frisbee/pkg/structure"
	corev1 "k8s.io/api/core/v1"
)

func createKubeService(ctx context.Context, obj *frisbee.FSBService, r *CreateServiceReconciler) error {
	_ = r.Log.WithValues("kubeService", obj.Name)

	// register ports from containers and sidecars
	var allPorts []corev1.ServicePort

	for _, container := range obj.Spec.Containers {
		for _, port := range container.Ports {
			allPorts = append(allPorts, corev1.ServicePort{
				Name: port.Name,
				Port: port.ContainerPort,
			})
		}
	}

	// clusterIP should be specified only with ports
	var clusterIP string
	if len(allPorts) == 0 {
		clusterIP = "None"
	}

	// create a self reference for matching the kubeService with the kubePod. The label is automatically imported to labels
	selfReference := map[string]string{"self": obj.GetName()}

	obj.ObjectMeta.SetLabels(structure.MergeMap(obj.GetLabels(), selfReference))

	kubeService := corev1.Service{
		ObjectMeta: makeItOwned(obj),
		Spec: corev1.ServiceSpec{
			Ports:     allPorts,
			Selector:  selfReference,
			ClusterIP: clusterIP,
		},
	}

	return r.Client.Create(ctx, &kubeService)
}
