package create

import (
	"context"

	frisbee "github.com/fnikolai/frisbee/api/v1alpha1"
	"github.com/fnikolai/frisbee/pkg/structure"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func createContainer(spec frisbee.ServiceSpec, volumemounts []corev1.VolumeMount) []corev1.Container {
	resources := func(resources frisbee.Resources) corev1.ResourceRequirements {
		list := corev1.ResourceList{}

		// native to kubernetes
		if len(resources.CPU) != 0 {
			list[corev1.ResourceCPU] = resource.MustParse(resources.CPU)
		}

		if len(resources.Memory) != 0 {
			list[corev1.ResourceMemory] = resource.MustParse(resources.Memory)
		}

		return corev1.ResourceRequirements{
			Limits:   list,
			Requests: list,
		}
	}
	_ = resources

	// If true, it leads to admission webhook error in chaos-mesh
	privilege := false

	for _, container := range spec.Containers {
		container.VolumeMounts = volumemounts
		container.TTY = true

		container.SecurityContext = &corev1.SecurityContext{
			Capabilities: &corev1.Capabilities{
				Add:  []corev1.Capability{"SYS_ADMIN"},
				Drop: nil,
			},
			Privileged: &privilege,
		}
	}

	return spec.Containers
}

func createKubePod(ctx context.Context, obj *frisbee.FSBService, r *CreateServiceReconciler,
	volumes []corev1.Volume, mounts []corev1.VolumeMount) error {

	_ = r.Log.WithValues("kubePod", obj.Name)

	containers := createContainer(obj.Spec, mounts)

	placement := func(spec frisbee.ServiceSpec) *corev1.Affinity {
		if len(spec.Domain) > 0 {
			domainLabels := map[string]string{"domain": spec.Domain}
			obj.SetLabels(structure.MergeMap(obj.GetLabels(), domainLabels))

			return &corev1.Affinity{
				NodeAffinity: nil,
				PodAffinity: &corev1.PodAffinity{
					PreferredDuringSchedulingIgnoredDuringExecution: []corev1.WeightedPodAffinityTerm{
						{
							Weight: 1,
							PodAffinityTerm: corev1.PodAffinityTerm{
								LabelSelector: &metav1.LabelSelector{
									MatchLabels: domainLabels,
								},
								TopologyKey: "kubernetes.io/hostname",
							},
						},
					},
				},
				PodAntiAffinity: nil,
			}
		}
		return nil
	}

	pod := corev1.Pod{
		ObjectMeta: makeItOwned(obj),
		Spec: corev1.PodSpec{
			Volumes:       volumes,
			RestartPolicy: corev1.RestartPolicyNever,
			Containers:    containers,
			Affinity:      placement(obj.Spec),
		},
	}

	return r.Client.Create(ctx, &pod)
}
