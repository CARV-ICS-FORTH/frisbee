apiVersion: frisbee.io/v1alpha1
kind: Template
metadata:
  name: redis
spec:
  entries:
    # Master node servicing requests
    "master":
      inputs:
        parameters:
          memory: ""
          cpu: ""
      spec: |
        agents:
          telemetry: [ sysmon/container, redismon/server ]
        resources:
          memory: {{"{{.Inputs.Parameters.memory}}"}}
          cpu: {{"{{.Inputs.Parameters.cpu}}"}}
        container:
          name: app
          image: redis
          ports:
            - name: to-clients
              containerPort: 6379
            - name: clusterbus
              containerPort: 16379
            - name: sentinel
              containerPort: 26379
          command:
            - /bin/sh   # Run shell
            - -c        # Read from string
            - |         # Multi-line str
              set -eum
              trap "touch /dev/shm/stop" EXIT

              cat > redis.conf <<EOF
                port 6379
                appendonly yes
              EOF

              redis-server redis.conf

          startupProbe:
            exec:
              command:
                - /bin/sh   # Run shell
                - -c        # Read from string
                - |         # Multi-line str
                  set -eum

                  response=$(timeout -s QUIT 30 redis-cli -h localhost -p 6379 ping)
                  if [ "$response" != "PONG" ]; then
                      echo "$response"
                      exit 1
                  fi

    # Replica of a master
    "slave":
      inputs:
        parameters:
          master: localhost
      spec: |
        agents:
          telemetry: [ sysmon/container, redismon/server ]
        container:
          name: app
          image: redis
          ports:
            - name: to-clients
              containerPort: 6379
            - name: clusterbus
              containerPort: 16379
            - name: sentinel
              containerPort: 26379
          command:
            - /bin/sh   # Run shell
            - -c        # Read from string
            - |         # Multi-line str
              set -eum
              trap "touch /dev/shm/stop" EXIT

              cat > redis.conf <<EOF
                port 6379
                appendonly yes
                slaveof {{"{{.Inputs.Parameters.master}}"}} 6379
              EOF

              redis-server redis.conf

          startupProbe:
            exec:
              command:
                - /bin/sh   # Run shell
                - -c        # Read from string
                - |         # Multi-line str
                  set -eum

                  response=$(timeout -s QUIT 30 redis-cli -h localhost -p 6379 ping)
                  if [ "$response" != "PONG" ]; then
                      echo "$response"
                      exit 1
                  fi

    # Failover agent
    "sentinel":
      inputs:
        parameters:
          master: localhost
      spec: |
        container:
          name: app
          image: redis
          ports:
            - name: sentinel
              containerPort: 26379
          command:
            - /bin/sh   # Run shell
            - -c        # Read from string
            - |         # Multi-line str
              set -eum
              trap "touch /dev/shm/stop" EXIT

              echo "Watch {{"{{.Inputs.Parameters.master}}"}}:6379"

              cat > sentinel.conf <<EOF
                sentinel resolve-hostnames yes
                sentinel monitor mymaster {{"{{.Inputs.Parameters.master}}"}} 6379 1
                sentinel down-after-milliseconds mymaster 5000
                sentinel failover-timeout mymaster 10000
                sentinel parallel-syncs mymaster 1
              EOF

              redis-sentinel sentinel.conf