---
apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: redis-baseline-cluster
spec:
  withTelemetry:
    importMonitors: ["sysmon/container", "ycsbmon/client", "redismon/server"]
    ingress:
      host: platform.science-hangar.eu

  actions:
    # Step 0: bootstrap.
    # For Redis, we must first create the servers, and then combine them into a cluster.
    - action: Cluster
      name: master
      cluster:
        templateRef: rediscluster/master
        instances: 3
        inputs:
          - {cpu: "8", memory: "32Gi"}

    - action: Service
      name: boot
      depends: {running: [master]}
      service:
        fromTemplate:
          templateRef: rediscluster/bootstrap
          inputs:
            - {servers: .cluster.master.all}


    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Service
      depends: {success: [boot]}
      name: loader
      service:
        fromTemplate:
          templateRef: ycsb-redis/loader
          inputs:
            - {server: .cluster.master.any, workload: workloada, recordcount: "1000000", threads: "400",
               mode: "cluster"}

    # Step 2: Run workload A
    - action: Service
      depends: {success: [loader]}
      name: workload-a
      service:
        fromTemplate:
          templateRef: ycsb-redis/runner
          inputs:
            - {server: .cluster.master.any, workload: workloada, operationcount: "1000000",
               cpu: "8", memory: "8Gi", threads: "40", mode: "cluster"}

    # Step 3: Run workload B
    - action: Service
      depends: {success: [workload-a]}
      name: workload-b
      service:
        fromTemplate:
          templateRef: ycsb-redis/runner
          inputs:
            - {mode: "cluster", server: .cluster.master.any, workload: workloadb, operationcount: "1000000",
               cpu: "8", memory: "8Gi", threads: "40"}

    # Step 4: Run workload C
    - action: Service
      depends: {success: [workload-b]}
      name: workload-c
      service:
        fromTemplate:
          templateRef: ycsb-redis/runner
          inputs:
            - {server: .cluster.master.any, workload: workloadc, operationcount: "1000000",
               cpu: "8", memory: "8Gi", threads: "40", mode: "cluster"}


    # Step 5: Run workload F
    - action: Service
      depends: {success: [workload-c]}
      name: workload-f
      service:
        fromTemplate:
          templateRef: ycsb-redis/runner
          inputs:
            - {server: .cluster.master.any, workload: workloadf, operationcount: "1000000",
               cpu: "8", memory: "8Gi", threads: "40", mode: "cluster"}


    # Step 6: Run workload D.
    - action: Service
      depends: {success: [workload-f]}
      name: workload-d
      service:
        fromTemplate:
          templateRef: ycsb-redis/runner
          inputs:
            - {server: .cluster.master.any, workload: workloadd, operationcount: "1000000",
               cpu: "8", memory: "8Gi", threads: "40", mode: "cluster"}

    # Step 7,8: Reload the data with parameters of workload E.
    # We use the dropdata field to remove all data before test.
    - action: Service
      depends: {success: [workload-d]}
      name: reloader
      service:
        fromTemplate:
          templateRef: ycsb-redis/loader
          inputs:
            - {mode: "cluster", server: .cluster.master.any, workload: workloade, dropdata: "true", recordcount: "1000000",
               threads: "400"}

    # Step 9:Run workload E
    - action: Service
      depends: {success: [reloader]}
      name: workload-e
      service:
        fromTemplate:
          templateRef: ycsb-redis/runner
          inputs:
            - {server: .cluster.master.any, workload: workloade, operationcount: "1000000",
               cpu: "8", memory: "8Gi", threads: "40", mode: "cluster"}
