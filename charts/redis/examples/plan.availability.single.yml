---
apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: redis-availability-single
spec:
  importMonitors: [ "platform.telemetry.container", "redis.telemetry.server", "ycsb.telemetry.client" ]

  testOracle:
    pass: >-
      {{.IsSuccessful "partition1"}} == true

  actions:
    # Create a single Master node
    - action: Service
      name: master
      service:
        
        templateRef: redis.single.master

    # Create a Slave node
    - action: Service
      name: slave
      depends: { running: [ master ] }
      service:
        
        templateRef: redis.single.slave
        inputs:
          - { master: .service.master.any }


    # Create a failover manager
    - action: Service
      name: sentinel
      depends: { running: [ master, slave ] }
      service:
        
        templateRef: redis.single.sentinel
        inputs:
          - { master: .service.master.any }


    # Ingest keys in parallel, into different ranges
    - action: Cluster
      name: "loaders"
      depends: { running: [ master ] }
      cluster:
        templateRef: ycsb.redis.loader
        inputs:
          - { server: .service.master.any, recordcount: "100000000", offset: "0" }

    # Cause two partition failures with different duration
    - action: Chaos
      name: partition0
      depends: { running: [ master, slave ], after: "3m" }
      chaos:
        type: partition
        partition:
          selector:
            macro: .service.master.any
          duration: "2m"

    - action: Chaos
      name: partition1
      depends: { running: [ master, slave ], success: [ partition0 ], after: "6m" }
      chaos:
        type: partition
        partition:
          selector: { macro: .service.master.any }
          duration: "1m"
