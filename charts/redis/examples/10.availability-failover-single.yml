---
apiVersion: frisbee.io/v1alpha1
kind: TestPlan
metadata:
  name: redis-availability-failover-single
spec:
  actions:
    # Step 1. Create a single Master node
    - action: Service
      name: master
      service:
        templateRef: redis.single.master

    # Step 2. Create a Slave node
    - action: Service
      name: slave
      depends: { running: [ master ] }
      service:
        templateRef: redis.single.slave
        inputs:
          - { master: .service.master.one }

    # Step 3. Create a failover manager
    - action: Service
      name: sentinel
      depends: { running: [ master, slave ] }
      service:
        templateRef: redis.single.sentinel
        inputs:
          - { master: .service.master.one }


    # Step 4. Hammer the server with requests
    - action: Cluster
      name: "loaders"
      depends: { running: [ master ] }
      cluster:
        templateRef: ycsb.redis.loader
        inputs:
          - { server: master, workload: workloada, recordcount: "10000000", threads: "1", delay: "15", mode: "single" }


    # Step 5. Cause partition A on the 3rd minute, lasting 2 minutes
    - action: Chaos
      name: partition-a
      depends: { running: [ master, slave ], after: "3m" }
      chaos:
        templateRef: chaos.network.partition
        inputs:
          - { targets: .service.master.one, duration: "2m" }


    # Step 5. Cause partition B on the 6th minute, lasting 1 minute
    - action: Chaos
      name: partition-b
      depends: { running: [ master, slave ], success: [ partition-a ], after: "6m" }
      chaos:
        templateRef: chaos.network.partition
        inputs:
          - { targets: .service.master.one, duration: "1m" }
