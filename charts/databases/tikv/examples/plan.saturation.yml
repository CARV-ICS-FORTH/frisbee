---
# This workflow mimic the official TikV evaluation workflow.
# All the performance parameters (threads, hardware configuration) are copied from:
# https://tikv.org/docs/5.1/deploy/performance/instructions/
#
# For a fixed number of TiKV, we perform experiments by changing the number of clients, for a given workload.
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: tikv-saturation
spec:
  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: coordinator
      service:
        templateRef: tikv.cluster.placement-driver

    - action: Cluster
      depends: { running: [ coordinator ] }
      name: workers
      cluster:
        templateRef: tikv.cluster.worker
        instances: 3
        inputs:
          - { placementDriver: coordinator }

    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Service
      depends: { running: [ workers ] }
      name: loader
      service:
        templateRef: ycsb.tikv.loader
        inputs:
          - { server: coordinator, workload: workloada, recordcount: "1000000", threads: "40" }


    # Step 2: Run workload A, for various number of non-overlapping clients.

    # Run workload A, for 1 client
    - action: Cluster
      depends: { success: [ loader ] }
      name: client-1
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 1
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 2 client
    - action: Cluster
      depends: { success: [ client-1 ] }
      name: client-2
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 2
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 3 client
    - action: Cluster
      depends: { success: [ client-2 ] }
      name: client-3
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 3
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000",threads: "40" }


    # Run workload A, for 4 client
    - action: Cluster
      depends: { success: [ client-3 ] }
      name: client-4
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 4
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 5 client
    - action: Cluster
      depends: { success: [ client-4 ] }
      name: client-5
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 5
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 6 client
    - action: Cluster
      depends: { success: [ client-5 ] }
      name: client-6
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 6
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 7 client
    - action: Cluster
      depends: { success: [ client-6 ] }
      name: client-7
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 7
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 8 client
    - action: Cluster
      depends: { success: [ client-7 ] }
      name: client-8
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 8
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 9 client
    - action: Cluster
      depends: { success: [ client-8 ] }
      name: client-9
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 9
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }


    # Run workload A, for 10 client
    - action: Cluster
      depends: { success: [ client-9 ] }
      name: client-10
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 10
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000",threads: "40" }


    # Run workload A, for 11 client
    - action: Cluster
      depends: { success: [ client-10 ] }
      name: client-11
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 11
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000",threads: "40" }

    # Run workload A, for 12 client
    - action: Cluster
      depends: { success: [ client-11 ] }
      name: client-12
      cluster:
        templateRef: ycsb.tikv.runner
        instances: 12
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "40" }

    # Step: Teardown
    - action: Delete
      name: teardown
      depends: { running: [ coordinator, workers], success: [ client-12 ] }
      delete:
        jobs: [ coordinator,  workers]