---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: redis-scaledown-stop
spec:
  actions:
    # Step 0. Create individual Redis servers
    - action: Cluster
      name: masters
      cluster:
        templateRef: redis.cluster.master
        instances: 3

    # Step 1. Create a Redis cluster from the individual servers
    - action: Service
      name: boot
      depends: { running: [ masters ] }
      service:
        templateRef: redis.cluster.bootstrap
        inputs:
          - { servers: .cluster.masters.all }


    # Step 2. Hammer the server with requests
    - action: Service
      depends: { success: [ boot ] }
      name: loader
      service:
        templateRef: ycsb.redis.loader
        inputs:
          - { server: .cluster.masters.one , workload: workloada, recordcount: "100000000", threads: "40", mode: "cluster" }


    # Periodically add new servers
    - action: Cluster
      name: more-servers
      depends: { running: [ loader ] }
      cluster:
        templateRef: redis.cluster.master
        instances: 10
        inputs:
          - { join: .cluster.masters.one }


    # When all servers are up and running, stop some of them
    - action: Cascade
      name: stop-servers
      depends: { running: [ more-servers ] }
      cascade:
        templateRef: system.chaos.pod.kill
        inputs:
          - { target: more-servers-2 }
          - { target: more-servers-5 }
          - { target: more-servers-8 }
          - { target: masters-2 }
        schedule:
          cron: "@every 1m"


    # Step: Teardown
    - action: Delete
      name: teardown
      depends: { success: [loader, stop-servers ] }
      delete:
        jobs: [ masters, more-servers ]