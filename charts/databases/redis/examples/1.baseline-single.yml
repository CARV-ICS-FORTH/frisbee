---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: redis-baseline-single
spec:
  actions:
    # Step 1. Create a Redis server
    - action: Service
      name: master
      service:
        templateRef: redis.single.master


    # Step 2. Preload the server with keys
    - action: Service
      depends: { running: [ master ] }
      name: loader
      service:
        templateRef: ycsb.redis.loader
        inputs:
          - { server: master, workload: workloada, recordcount: "1000000", threads: "400", delay: "15", mode: "single" }


    # Step 3: Run workload A
    - action: Service
      depends: { success: [ loader ] }
      name: workload-a
      service:
        templateRef: ycsb.redis.runner
        inputs:
          - { server: master, workload: workloada, operationcount: "1000000", threads: "40", mode: "single" }


    # Step 4. Run YCSB workload B
    - action: Service
      depends: { success: [ workload-a ] }
      name: workload-b
      service:
        templateRef: ycsb.redis.runner
        inputs:
          - { server: master, workload: workloadb, operationcount: "1000000", threads: "40", mode: "single" }

    # Step 5. Run YCSB workload C
    - action: Service
      depends: { success: [ workload-b ] }
      name: workload-c
      service:
        templateRef: ycsb.redis.runner
        inputs:
          - { server: master, workload: workloadc, operationcount: "1000000", threads: "40", mode: "single" }

    # Step 6. Run YCSB workload F
    - action: Service
      depends: { success: [ workload-c ] }
      name: workload-f
      service:
        templateRef: ycsb.redis.runner
        inputs:
          - { server: master, workload: workloadf, operationcount: "1000000", threads: "40", mode: "single" }

    # Step 7. Run YCSB workload D
    - action: Service
      depends: { success: [ workload-f ] }
      name: workload-d
      service:
        templateRef: ycsb.redis.runner
        inputs:
          - { server: master, workload: workloadd, operationcount: "1000000", threads: "40", mode: "single" }

    # Step 8: Reload the data with parameters of workload E.
    # Otherwise, the remaining data of the cluster might affect the results
    # We use the dropdata field to remove all data before test.
    - action: Service
      depends: { success: [ workload-d ] }
      name: reloader
      service:
        templateRef: ycsb.redis.loader
        inputs:
          - { server: master, workload: workloade, recordcount: "1000000", threads: "400", dropdata: "true", mode: "single" }


    # Step 9: Run workload E
    - action: Service
      depends: { success: [ reloader ] }
      name: workload-e
      service:
        templateRef: ycsb.redis.runner
        inputs:
          - { server: master, workload: workloade, operationcount: "1000000", threads: "40", mode: "single" }



    # Step 10: Teardown
    - action: Delete
      name: teardown
      depends: { running: [ master ], success: [ workload-e ] }
      delete:
        jobs: [ master ]
