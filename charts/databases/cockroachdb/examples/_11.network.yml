---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: cockroach-network
spec:
  actions:
    # Step 0. provision 4 individual servers
    - action: Cluster
      name: masters
      cluster:
        templateRef: cockroach.cluster.master
        instances: 4
        inputs:
          - { join: "masters-0:26257,masters-1:26257,masters-2:26257,masters-3:26257" }

    # Step 1. Create a cockroach cluster from the individual servers
    - action: Call
      name: boot
      depends: { running: [ masters ] }
      call:
        callable: boot
        services: [ masters-0 ]
        expect:
          - { stdout: "Cluster successfully initialized.*" }

    # Step 2. import TPC-C data from the workload node (node 1)
    - action: Call
      name: import-workload
      depends: { success: [ boot ] }
      call:
        callable: test2-import-tpcc
        services: [ masters-0 ]

    # Step 3. wait for 3x replication
    # Alternatively, wait for "Under-replicated" metric from Grafana to become 0
    - action: Call
      name: wait-for-3x-replication
      depends: { success: [ import-workload ] }
      call:
        callable: test2-wait-for-3x-replication
        services: [ masters-0 ]

    # Step 4. run TPC-C workload from the workload node (node 4)
    - action: Call
      name: run-workload
      depends: { success: [ wait-for-3x-replication ] }
      call:
        callable: test2-run-workload
        services: [ masters-3 ]
        tolerate:
          failedJobs: 1

    # Step5. partition node 1 from the rest of the nodes; node 1 can reach other nodes, but no other nodes can reach node 1
    - action: Chaos
      name: partition0
      depends: { success: [ wait-for-3x-replication ], after: "3m" } # give tpcc a head start
      chaos:
        templateRef: system.chaos.network.partition.partial
        inputs:
          - { source: masters-0, duration: 10m , direction: "to", dst: "masters-1, masters-2, masters-3" }


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [ masters ] }
      delete:
        jobs: [ masters ]