---
apiVersion: frisbee.io/v1alpha1
kind: Template
metadata:
  name: system.telemetry.prometheus.template
spec:
  service:
    volumes:
      - name: config
        configMap:
          name: system.telemetry.prometheus.config
    containers:
      - name: prometheus
        image: "prom/prometheus"
        ports:
          - name: http
            containerPort: 9090
        volumeMounts:
          - name: config
            mountPath: /etc/prometheus/prometheus.yml
            subPath: prometheus.yml
            readOnly: true


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: system.telemetry.prometheus.config
data:
  prometheus.yml: |
    # For all the confusing Prometheus configuration and
    # regular expressions,
    # explained in examples.

    # Remember, there are default values for each item if it's missing.
    # regex is (.*),
    # replacement is $1,
    # separator is ;
    # ,and action is replace
    global:
      # Can be overridden
      scrape_interval: 15s
      evaluation_interval: 15s

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'agent'

        honor_labels: true
        # Set it to false in order to avoid time drifts
        honor_timestamps: {{.Values.telemetry.honorTimestamp}}

        scheme: http

        # Use Kubernetes Service Discovery
        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          # Condition 1. Monitor only the ports with name "mon-*". The * is used as type to the dashboard
          - source_labels: [ __meta_kubernetes_pod_container_port_name ]
            separator: ;
            regex: mon-(.*)
            action: keep

          # Extract hints for the dashboard
          - source_labels: [ __meta_kubernetes_pod_container_name ]
            separator: ;
            regex: (.*)
            target_label: agent
            replacement: ${1}
            action: replace

          # Extract information about the target container
          - source_labels: [ __meta_kubernetes_endpoint_address_target_name ]
            separator: ;
            regex: (.*)
            target_label: instance
            replacement: ${1}
            action: replace

          # Extract information about the host where container is running
          - source_labels: [ __meta_kubernetes_endpoint_node_name ]
            separator: ;
            regex: (.*)
            target_label: node
            replacement: ${1}
            action: replace

          # Replace All kubernetes flags with the normal counterparts
          # all __meta_kubernetes_service_label_(.+) will be changed to the (.+)
          # e.g. __meta_kubernetes_service_label_app='armada-api' to app='armada-api'
          # - action: labelmap
          #   replacement: $1
          #   regex: __meta_kubernetes_service_label_(.+)

