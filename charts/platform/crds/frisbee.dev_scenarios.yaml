---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: scenarios.frisbee.dev
spec:
  group: frisbee.dev
  names:
    kind: Scenario
    listKind: ScenarioList
    plural: scenarios
    singular: scenario
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Scenario is the Schema for the Scenarios API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ScenarioSpec defines the desired state of Scenario.
            properties:
              actions:
                description: Actions are the tasks that will be taken.
                items:
                  description: Action is a step in a workflow that defines a particular
                    part of a testing process.
                  properties:
                    action:
                      description: ActionType refers to a category of actions that
                        can be associated with a specific controller.
                      enum:
                      - Service
                      - Cluster
                      - Chaos
                      - Cascade
                      - Delete
                      - Call
                      type: string
                    assert:
                      description: Assert defines the conditions that must be maintained
                        after the action has been started. If the evaluation of the
                        condition is false, the Scenario will abort immediately.
                      properties:
                        metrics:
                          description: 'Metrics set a Grafana alert that will be triggered
                            once the condition is met. Parsing: Grafana URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                            metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                          nullable: true
                          type: string
                        state:
                          description: State describe the runtime condition that should
                            be met after the action has been executed Shall be defined
                            using .Lifecycle() methods. The methods account only jobs
                            that are managed by the object.
                          nullable: true
                          type: string
                      type: object
                    call:
                      description: CallSpec defines the desired state of Call.
                      properties:
                        callable:
                          description: Callable is the name of the endpoint that will
                            be called
                          type: string
                        expect:
                          description: Expect declares a list of expected outputs.
                            The number of expected outputs must be the same as the
                            number of defined services.
                          items:
                            description: MatchOutputs defined a set of remote command
                              outputs that must be matched. The limit for both Stdout
                              and Stderr is 1024 characters.
                            properties:
                              stderr:
                                description: Stderr is a regex that describes the
                                  expected output from stderr. It cannot be longer
                                  than 1024 characters.
                                maxLength: 1024
                                type: string
                              stdout:
                                description: Stdout is a regex that describes the
                                  expected output from stdout. It cannot be longer
                                  than 1024 characters.
                                maxLength: 1024
                                type: string
                            type: object
                          type: array
                        schedule:
                          description: Schedule defines the interval between the invocations
                            of the callable.
                          properties:
                            cron:
                              description: "Cron defines a cron job rule. \n Some
                                rule examples: \"0 30 * * * *\" means to \"Every hour
                                on the half hour\" \"@hourly\"      means to \"Every
                                hour\" \"@every 1h30m\" means to \"Every hour thirty\"
                                \n More rule info: https://godoc.org/github.com/robfig/cron"
                              type: string
                            event:
                              description: Event schedules a new every when an event
                                has happened.
                              properties:
                                metrics:
                                  description: 'Metrics set a Grafana alert that will
                                    be triggered once the condition is met. Parsing:
                                    Grafana URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                    metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                                  nullable: true
                                  type: string
                                state:
                                  description: State describe the runtime condition
                                    that should be met after the action has been executed
                                    Shall be defined using .Lifecycle() methods. The
                                    methods account only jobs that are managed by
                                    the object.
                                  nullable: true
                                  type: string
                              type: object
                            startingDeadlineSeconds:
                              description: StartingDeadlineSeconds is an optional
                                deadline in seconds for starting the job if it misses
                                scheduled time for any reason. if we miss this deadline,
                                we'll just wait till the next scheduled time
                              format: int64
                              type: integer
                          type: object
                        services:
                          description: Services is a list of services that will be
                            stopped.
                          items:
                            type: string
                          type: array
                        suspend:
                          description: Suspend flag tells the controller to suspend
                            subsequent executions, it does not apply to already started
                            executions.  Defaults to false.
                          type: boolean
                        tolerate:
                          description: Tolerate specifies the conditions under which
                            the call will fail. If undefined, the call fails immediately
                            when a call to service has failed.
                          properties:
                            failedJobs:
                              description: FailedJobs indicate the number of services
                                that may fail before the cluster fails itself.
                              minimum: 1
                              type: integer
                          type: object
                        until:
                          description: Until defines the conditions under which the
                            CR will stop spawning new jobs. If used in conjunction
                            with inputs, it will loop over inputs until the conditions
                            are met.
                          properties:
                            metrics:
                              description: 'Metrics set a Grafana alert that will
                                be triggered once the condition is met. Parsing: Grafana
                                URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                              nullable: true
                              type: string
                            state:
                              description: State describe the runtime condition that
                                should be met after the action has been executed Shall
                                be defined using .Lifecycle() methods. The methods
                                account only jobs that are managed by the object.
                              nullable: true
                              type: string
                          type: object
                      required:
                      - services
                      type: object
                    cascade:
                      description: CascadeSpec defines the desired state of Cascade.
                      properties:
                        inputs:
                          description: Inputs are list of inputs passed to the objects.
                            Event used in conjunction with instances, if the number
                            of instances is larger that the number of inputs, then
                            inputs are recursively iteration.
                          items:
                            additionalProperties:
                              type: string
                            type: object
                          type: array
                        instances:
                          description: MaxInstances dictate the number of objects
                            to be created for the CR. If no inputs are defined, then
                            all instances will be initiated using the default parameters
                            of the template. Event used in conjunction with Until,
                            MaxInstances as a max bound.
                          type: integer
                        schedule:
                          description: Schedule defines the interval between the creation
                            of services within the group.
                          properties:
                            cron:
                              description: "Cron defines a cron job rule. \n Some
                                rule examples: \"0 30 * * * *\" means to \"Every hour
                                on the half hour\" \"@hourly\"      means to \"Every
                                hour\" \"@every 1h30m\" means to \"Every hour thirty\"
                                \n More rule info: https://godoc.org/github.com/robfig/cron"
                              type: string
                            event:
                              description: Event schedules a new every when an event
                                has happened.
                              properties:
                                metrics:
                                  description: 'Metrics set a Grafana alert that will
                                    be triggered once the condition is met. Parsing:
                                    Grafana URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                    metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                                  nullable: true
                                  type: string
                                state:
                                  description: State describe the runtime condition
                                    that should be met after the action has been executed
                                    Shall be defined using .Lifecycle() methods. The
                                    methods account only jobs that are managed by
                                    the object.
                                  nullable: true
                                  type: string
                              type: object
                            startingDeadlineSeconds:
                              description: StartingDeadlineSeconds is an optional
                                deadline in seconds for starting the job if it misses
                                scheduled time for any reason. if we miss this deadline,
                                we'll just wait till the next scheduled time
                              format: int64
                              type: integer
                          type: object
                        suspend:
                          description: Suspend flag tells the controller to suspend
                            subsequent executions, it does not apply to already started
                            executions.  Defaults to false.
                          type: boolean
                        templateRef:
                          description: TemplateRef refers to a  template (e.g, iperf-server).
                          type: string
                        until:
                          description: Until defines the conditions under which the
                            CR will stop spawning new jobs. If used in conjunction
                            with inputs, it will loop over inputs until the conditions
                            are met.
                          properties:
                            metrics:
                              description: 'Metrics set a Grafana alert that will
                                be triggered once the condition is met. Parsing: Grafana
                                URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                              nullable: true
                              type: string
                            state:
                              description: State describe the runtime condition that
                                should be met after the action has been executed Shall
                                be defined using .Lifecycle() methods. The methods
                                account only jobs that are managed by the object.
                              nullable: true
                              type: string
                          type: object
                      required:
                      - templateRef
                      type: object
                    chaos:
                      description: GenerateFromTemplate generates a spec by parameterizing
                        the templateRef with the given inputs.
                      properties:
                        inputs:
                          description: Inputs are list of inputs passed to the objects.
                            Event used in conjunction with instances, if the number
                            of instances is larger that the number of inputs, then
                            inputs are recursively iteration.
                          items:
                            additionalProperties:
                              type: string
                            type: object
                          type: array
                        instances:
                          description: MaxInstances dictate the number of objects
                            to be created for the CR. If no inputs are defined, then
                            all instances will be initiated using the default parameters
                            of the template. Event used in conjunction with Until,
                            MaxInstances as a max bound.
                          type: integer
                        templateRef:
                          description: TemplateRef refers to a  template (e.g, iperf-server).
                          type: string
                        until:
                          description: Until defines the conditions under which the
                            CR will stop spawning new jobs. If used in conjunction
                            with inputs, it will loop over inputs until the conditions
                            are met.
                          properties:
                            metrics:
                              description: 'Metrics set a Grafana alert that will
                                be triggered once the condition is met. Parsing: Grafana
                                URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                              nullable: true
                              type: string
                            state:
                              description: State describe the runtime condition that
                                should be met after the action has been executed Shall
                                be defined using .Lifecycle() methods. The methods
                                account only jobs that are managed by the object.
                              nullable: true
                              type: string
                          type: object
                      required:
                      - templateRef
                      type: object
                    cluster:
                      description: ClusterSpec defines the desired state of Cluster.
                      properties:
                        inputs:
                          description: Inputs are list of inputs passed to the objects.
                            Event used in conjunction with instances, if the number
                            of instances is larger that the number of inputs, then
                            inputs are recursively iteration.
                          items:
                            additionalProperties:
                              type: string
                            type: object
                          type: array
                        instances:
                          description: MaxInstances dictate the number of objects
                            to be created for the CR. If no inputs are defined, then
                            all instances will be initiated using the default parameters
                            of the template. Event used in conjunction with Until,
                            MaxInstances as a max bound.
                          type: integer
                        placement:
                          description: Placement defines rules for placing the containers
                            across the available nodes.
                          properties:
                            collocate:
                              description: Collocate will place all the Services of
                                this Cluster within the same node.
                              type: boolean
                            conflictsWith:
                              description: ConflictsWith points to another Cluster
                                whose Services cannot be located with this one. For
                                example, this is needed for placing the master nodes
                                on a different failure domain than the slave nodes.
                              items:
                                type: string
                              type: array
                            nodes:
                              description: Nodes will place all the Services of this
                                Cluster within the specific set of nodes.
                              items:
                                type: string
                              type: array
                          type: object
                        schedule:
                          description: Schedule defines the interval between the creation
                            of services in the group.
                          properties:
                            cron:
                              description: "Cron defines a cron job rule. \n Some
                                rule examples: \"0 30 * * * *\" means to \"Every hour
                                on the half hour\" \"@hourly\"      means to \"Every
                                hour\" \"@every 1h30m\" means to \"Every hour thirty\"
                                \n More rule info: https://godoc.org/github.com/robfig/cron"
                              type: string
                            event:
                              description: Event schedules a new every when an event
                                has happened.
                              properties:
                                metrics:
                                  description: 'Metrics set a Grafana alert that will
                                    be triggered once the condition is met. Parsing:
                                    Grafana URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                    metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                                  nullable: true
                                  type: string
                                state:
                                  description: State describe the runtime condition
                                    that should be met after the action has been executed
                                    Shall be defined using .Lifecycle() methods. The
                                    methods account only jobs that are managed by
                                    the object.
                                  nullable: true
                                  type: string
                              type: object
                            startingDeadlineSeconds:
                              description: StartingDeadlineSeconds is an optional
                                deadline in seconds for starting the job if it misses
                                scheduled time for any reason. if we miss this deadline,
                                we'll just wait till the next scheduled time
                              format: int64
                              type: integer
                          type: object
                        suspend:
                          description: Suspend flag tells the controller to suspend
                            subsequent executions, it does not apply to already started
                            executions.  Defaults to false.
                          type: boolean
                        templateRef:
                          description: TemplateRef refers to a  template (e.g, iperf-server).
                          type: string
                        tolerate:
                          description: Tolerate specifies the conditions under which
                            the cluster will fail. If undefined, the cluster fails
                            immediately when a service has failed.
                          properties:
                            failedJobs:
                              description: FailedJobs indicate the number of services
                                that may fail before the cluster fails itself.
                              minimum: 1
                              type: integer
                          type: object
                        until:
                          description: Until defines the conditions under which the
                            CR will stop spawning new jobs. If used in conjunction
                            with inputs, it will loop over inputs until the conditions
                            are met.
                          properties:
                            metrics:
                              description: 'Metrics set a Grafana alert that will
                                be triggered once the condition is met. Parsing: Grafana
                                URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                              nullable: true
                              type: string
                            state:
                              description: State describe the runtime condition that
                                should be met after the action has been executed Shall
                                be defined using .Lifecycle() methods. The methods
                                account only jobs that are managed by the object.
                              nullable: true
                              type: string
                          type: object
                      required:
                      - templateRef
                      type: object
                    delete:
                      properties:
                        jobs:
                          description: Jobs is a list of jobs to be deleted. The format
                            is {"kind":"name"}, e.g, {"service","client"}
                          items:
                            type: string
                          type: array
                      required:
                      - jobs
                      type: object
                    depends:
                      description: DependsOn defines the conditions for the execution
                        of this action
                      properties:
                        after:
                          description: After is the time offset since the beginning
                            of this action.
                          type: string
                        running:
                          description: Running waits for the given groups to be running
                          items:
                            type: string
                          type: array
                        success:
                          description: Success waits for the given groups to be succeeded
                          items:
                            type: string
                          type: array
                      type: object
                    name:
                      description: Name is a unique identifier of the action
                      type: string
                    service:
                      description: GenerateFromTemplate generates a spec by parameterizing
                        the templateRef with the given inputs.
                      properties:
                        inputs:
                          description: Inputs are list of inputs passed to the objects.
                            Event used in conjunction with instances, if the number
                            of instances is larger that the number of inputs, then
                            inputs are recursively iteration.
                          items:
                            additionalProperties:
                              type: string
                            type: object
                          type: array
                        instances:
                          description: MaxInstances dictate the number of objects
                            to be created for the CR. If no inputs are defined, then
                            all instances will be initiated using the default parameters
                            of the template. Event used in conjunction with Until,
                            MaxInstances as a max bound.
                          type: integer
                        templateRef:
                          description: TemplateRef refers to a  template (e.g, iperf-server).
                          type: string
                        until:
                          description: Until defines the conditions under which the
                            CR will stop spawning new jobs. If used in conjunction
                            with inputs, it will loop over inputs until the conditions
                            are met.
                          properties:
                            metrics:
                              description: 'Metrics set a Grafana alert that will
                                be triggered once the condition is met. Parsing: Grafana
                                URL: http://grafana/d/A2EjFbsMk/ycsb-services?editPanel=86
                                metrics: A2EjFbsMk/86/Average (Panel/Dashboard/Metric)'
                              nullable: true
                              type: string
                            state:
                              description: State describe the runtime condition that
                                should be met after the action has been executed Shall
                                be defined using .Lifecycle() methods. The methods
                                account only jobs that are managed by the object.
                              nullable: true
                              type: string
                          type: object
                      required:
                      - templateRef
                      type: object
                  required:
                  - action
                  - name
                  type: object
                type: array
              options:
                description: Options define some additional automations on the experiment
                properties:
                  shared-storage:
                    description: PersistentVolumeClaim is a user's request for and
                      claim to a persistent volume
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        type: object
                      spec:
                        description: 'spec defines the desired characteristics of
                          a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. If the AnyVolumeDataSource
                              feature gate is enabled, this field will always have
                              the same contents as the DataSourceRef field.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any local object from
                              a non-empty API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the DataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              both fields (DataSource and DataSourceRef) will be set
                              to the same value automatically if one of them is empty
                              and the other is non-empty. There are two important
                              differences between DataSource and DataSourceRef: *
                              While DataSource only allows two specific types of objects,
                              DataSourceRef allows any non-core object, as well as
                              PersistentVolumeClaim objects. * While DataSource ignores
                              disallowed values (dropping them), DataSourceRef preserves
                              all values, and generates an error if a disallowed value
                              is specified. (Beta) Using this field requires the AnyVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      status:
                        description: 'status represents the current information/status
                          of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          accessModes:
                            description: 'accessModes contains the actual access modes
                              the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          allocatedResources:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: allocatedResources is the storage resource
                              within AllocatedResources tracks the capacity allocated
                              to a PVC. It may be larger than the actual capacity
                              when a volume expansion operation is requested. For
                              storage quota, the larger value from allocatedResources
                              and PVC.spec.resources is used. If allocatedResources
                              is not set, PVC.spec.resources alone is used for quota
                              calculation. If a volume expansion capacity request
                              is lowered, allocatedResources is only lowered if there
                              are no expansion operations in progress and if the actual
                              volume capacity is equal or lower than the requested
                              capacity. This is an alpha field and requires enabling
                              RecoverVolumeExpansionFailure feature.
                            type: object
                          capacity:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: capacity represents the actual resources
                              of the underlying volume.
                            type: object
                          conditions:
                            description: conditions is the current Condition of persistent
                              volume claim. If underlying persistent volume is being
                              resized then the Condition will be set to 'ResizeStarted'.
                            items:
                              description: PersistentVolumeClaimCondition contails
                                details about state of pvc
                              properties:
                                lastProbeTime:
                                  description: lastProbeTime is the time we probed
                                    the condition.
                                  format: date-time
                                  type: string
                                lastTransitionTime:
                                  description: lastTransitionTime is the time the
                                    condition transitioned from one status to another.
                                  format: date-time
                                  type: string
                                message:
                                  description: message is the human-readable message
                                    indicating details about last transition.
                                  type: string
                                reason:
                                  description: reason is a unique, this should be
                                    a short, machine understandable string that gives
                                    the reason for condition's last transition. If
                                    it reports "ResizeStarted" that means the underlying
                                    persistent volume is being resized.
                                  type: string
                                status:
                                  type: string
                                type:
                                  description: PersistentVolumeClaimConditionType
                                    is a valid value of PersistentVolumeClaimCondition.Type
                                  type: string
                              required:
                              - status
                              - type
                              type: object
                            type: array
                          phase:
                            description: phase represents the current phase of PersistentVolumeClaim.
                            type: string
                          resizeStatus:
                            description: resizeStatus stores status of resize operation.
                              ResizeStatus is not set by default but when expansion
                              is complete resizeStatus is set to empty string by resize
                              controller or kubelet. This is an alpha field and requires
                              enabling RecoverVolumeExpansionFailure feature.
                            type: string
                        type: object
                    type: object
                required:
                - shared-storage
                type: object
              suspend:
                description: Suspend flag tells the controller to suspend subsequent
                  executions, it does not apply to already started executions.  Defaults
                  to false.
                type: boolean
            required:
            - actions
            type: object
          status:
            description: ScenarioStatus defines the observed state of Scenario.
            properties:
              conditions:
                description: Conditions describe sequences of events that warrant
                  the present Phase.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{ // Represents the observations of a foo's
                    current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              grafanaEndpoint:
                description: GrafanaEndpoint points to the local Grafana instance
                type: string
              message:
                description: Message provides more details for understanding the Reason.
                type: string
              phase:
                description: Phase is a simple, high-level summary of where the Object
                  is in its lifecycle. The conditions array, the reason and message
                  fields, and the individual container status arrays contain more
                  detail about the pod's status.
                type: string
              prometheusEndpoint:
                description: PrometheusEndpoint points to the local Prometheus instance
                type: string
              reason:
                description: Reason is A brief CamelCase message indicating details
                  about why the service is in this Phase. e.g. 'Evicted'
                type: string
              scheduledJobs:
                description: ScheduledJobs is a list of references to the names of
                  executed actions.
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
