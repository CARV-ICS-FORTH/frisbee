---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: system.telemetry.prometheus.template
spec:
  service:
    requirements:
      ingressBackend:
        service:
          name: self
          port:
            number: {{.Values.telemetry.prometheus.port}}

    decorators:
      labels:
        scenario.frisbee.dev/component: SYS

    volumes:
      - name: config # Parameterized config using the reflective information
        configMap:
          name: system.telemetry.prometheus.config

    containers:
      - name: app
        image: "prom/prometheus"
        ports:
          - name: http
            containerPort: 9090
        volumeMounts:
          - name: config
            mountPath: /etc/prometheus/prometheus.yml
            subPath: prometheus.yml
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            # Create local envs that will be used to substitute the configuration placeholders
            export NAMESPACE={{"{{.Namespace}}"}}
            export SCENARIO={{"{{.Scenario}}"}}
            
            # Use envsubst to replace ${var} or $var according to the values of the current environment variables.
            wget https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-Linux-x86_64
            chmod +x envsubst-Linux-x86_64

            # Run Prometheus with the new modified configuration
            ./envsubst-Linux-x86_64 -i /etc/prometheus/prometheus.yml -o ./prometheus.yml
            /bin/prometheus --config.file=./prometheus.yml --query.lookback-delta={{.Values.telemetry.prometheus.queryLookbackDelta}}

        startupProbe:
          httpGet:
            path: /ready
            port: http
          failureThreshold: 30
          periodSeconds: 10

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: system.telemetry.prometheus.config
data:
  prometheus.yml: |-
    # For all the confusing Prometheus configuration and
    # regular expressions,
    # explained in examples.

    # Remember, there are default values for each item if it's missing.
    # regex is (.*),
    # replacement is $1,
    # separator is ;
    # ,and action is replace
    global:
      # Can be overridden
      scrape_interval: 15s
      evaluation_interval: 15s

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'agent'

        honor_labels: true
        # Set it to false in order to avoid time drifts
        honor_timestamps: {{.Values.telemetry.prometheus.honorTimestamp}}

        scheme: http

        # The pod role discovers all pods and exposes their containers as targets.
        # Optional namespace discovery. If omitted, all namespaces are used.
        # The vars ${NAMESPACE} and ${SCENARIO} will be replaced by envst on the pod.
        # For more info check https://prometheus.io/docs/prometheus/latest/configuration/configuration/
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ${NAMESPACE}

        relabel_configs:
          # Condition 1. Filter services that belong to the same scenario as this Prometheus instance.
          - source_labels: [ __meta_kubernetes_pod_label_scenario_frisbee_dev_name ]
            separator: ;
            regex: ${SCENARIO}
            action: keep

          # Condition 2. Filter the telemetry containers (ports with name "telemetry")
          - source_labels: [ __meta_kubernetes_pod_container_port_name ]
            separator: ;
            regex: tel-(.*)
            action: keep

          # Extract information about the target container
          - source_labels: [ __meta_kubernetes_pod_name ]
            separator: ;
            target_label: instance
            action: replace

          # Extract information about the host where container is running
          - source_labels: [ __meta_kubernetes_pod_node_name ]
            separator: ;
            target_label: node
            action: replace

          # Extract hints for the dashboard
          - source_labels: [ __meta_kubernetes_pod_container_name ]
            separator: ;
            target_label: agent
            action: replace