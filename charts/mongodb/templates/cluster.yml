---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: mongodb.cluster.master
spec:
  inputs:
    parameters:
      slaves: ""
      port: "27017"
      memory: ""
      cpu: ""
  service:
    decorators:
      telemetry:
        - system.telemetry.agent
        - mongo.telemetry.server
      resources:
        cpu: {{"{{.Inputs.Parameters.cpu}}" | quote}}
        memory: {{"{{.Inputs.Parameters.memory}}" |quote}}
    containers: # Container
      - name: app
        image: bitnami/mongodb
        ports:
          - name: to-clients
            containerPort: {{"{{.Inputs.Parameters.port}}"  | int}}
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
            trap "touch /dev/shm/stop" EXIT # Sidecar: use it to terminate itself when this container has exit.

            echo "Create Mongo configuration"
            cat > /tmp/mongod.conf <<EOF
              # network interfaces
              net:
                port: {{"{{.Inputs.Parameters.port}}"}}
                bindIp: 0.0.0.0

              # Where and how to store data.
              storage:
                dbPath: /bitnami/mongodb/data/
                journal:
                  enabled: true

              # operation mode
              replication:
                replSetName: app1r0
            EOF

            echo "Create Replicaset with {{"{{.Inputs.Parameters.slaves}}"}}"
            cat > /tmp/rs-init.js <<EOF
              rs.initiate()
            {{`{{- range splitList " " .Inputs.Parameters.slaves}}
                  rs.add("{{.}}")
            {{- end}}`}}
            EOF

            echo "Schedule replicate set creation"
            sleep 10 && mongo < /tmp/rs-init.js &

            echo "Create Mongo daemon"
            mongod --config /tmp/mongod.conf

        startupProbe:
          exec:
            command:
              - /bin/sh   # Run shell
              - -c        # Read from string
              - |         # Multi-line str
                set -eum

                response=$(timeout -s QUIT 30 mongo --eval 'rs.status().ok' localhost:{{"{{.Inputs.Parameters.port}}"}} --quiet)
                if ["$response" != "1"]; then
                    exit 1
                fi

---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: mongodb.cluster.slave
spec:
  inputs:
    parameters:
      port: "27017"
      memory: ""
      cpu: ""
  service:
    decorators: # Decorators
      telemetry: [ system.telemetry.agent, mongo.telemetry.server/telegraf ]
      resources:
        cpu: {{"{{.Inputs.Parameters.cpu}}" |quote}}
        memory: {{"{{.Inputs.Parameters.memory}}" |quote}}
    containers: # Container
      - name: app
        image: bitnami/mongodb
        ports:
          - name: to-clients
            containerPort: {{"{{.Inputs.Parameters.port}}" | int}}
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
            trap "touch /dev/shm/stop" EXIT # Sidecar: use it to terminate itself when this container has exit.

            echo "Create Mongo configuration"
            cat > /tmp/mongod.conf <<EOF
              # network interfaces
              net:
                port: {{"{{.Inputs.Parameters.port}}"}}
                bindIp: 0.0.0.0

              # Where and how to store data.
              storage:
                dbPath: /bitnami/mongodb/data/
                journal:
                  enabled: true

              # operation mode
              replication:
                replSetName: app1r0
            EOF

            mongod --config /tmp/mongod.conf

        startupProbe:
          exec:
            command:
              - /bin/sh   # Run shell
              - -c        # Read from string
              - |         # Multi-line str
                set -eum

                response=$(timeout -s QUIT 30 mongo --eval 'db.runCommand("ping").ok' localhost:{{"{{.Inputs.Parameters.port}}"}}/test --quiet)
                if ["$response" != "1"]; then
                    exit 1
                fi
