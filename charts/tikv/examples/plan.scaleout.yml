---
# This experiment runs a given load for various numbers of TikV instance.
# This goal is to find the maximum number of TikV servers after which the overall performance does not increase further.
apiVersion: frisbee.io/v1alpha1
kind: TestPlan
metadata:
  name: tikv-scaleout
spec:
  withTelemetry:
    importDashboards:
      - platform.telemetry.container
      - ycsb.telemetry.client
      - tikv.telemetry.pd
      - tikv.telemetry.worker

  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: master
      service:
        templateRef: tikv.cluster.placement-driver

    - action: Cluster
      depends: { running: [ master ] }
      name: workers
      cluster:
        templateRef: tikv.cluster.worker
        instances: 256
        inputs:
          - { placementDriver: .service.master.one }


    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Cluster
      name: loaders
      depends: { running: [ master, workers ] }
      cluster:
        templateRef: ycsb.tikv.loader
        inputs:
          - { server: .service.master.one, recordcount: "100000000000", offset: "0", threads: "32" }
