---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coverage-ingress
spec:
  rules:
    - host: master.platform.science-hangar.eu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: master
                port:
                  number: 80

    - host: worker0.platform.science-hangar.eu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: workers-0
                port:
                  number: 80

    - host: worker1.platform.science-hangar.eu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: worker1
                port:
                  number: 80

---
apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: tikv-baseline
spec:
  withTelemetry:
    importMonitors: [ "platform.telemetry.container", "ycsb.telemetry.client", "tikv.telemetry.pd", "tikv.telemetry.worker" ]

  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: master
      service:
        fromTemplate:
          templateRef: tikv.cluster.coverage.placement-driver
            #inputs:
          # - { cpu: "4", memory: "8Gi" }

    - action: Cluster
      depends: { running: [ master ] }
      name: workers
      cluster:
        templateRef: tikv.cluster.coverage.worker
        instances: 1
        inputs:
          - { placementDriver: .service.master.any }

    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Service
      depends: { running: [ workers ] , after: 30h}
      name: loader
      service:
        fromTemplate:
          templateRef: ycsb.tikv.loader
          inputs:
            - { server: .service.master.any, workload: workloada, recordcount: "10000000" }

    # Step 2: Run workload A
    - action: Service
      depends: { success: [ loader ] }
      name: workload-a
      service:
        fromTemplate:
          templateRef: ycsb.tikv.runner
          inputs:
            - { server: .service.master.any, workload: workloada, operationcount: "1000000", }

    # Step 3: Run workload B
    - action: Service
      depends: { success: [ workload-a ] }
      name: workload-b
      service:
        fromTemplate:
          templateRef: ycsb.tikv.runner
          inputs:
            - { server: .service.master.any, workload: workloadb, operationcount: "1000000",}

    # Step 4: Run workload C
    - action: Service
      depends: { success: [ workload-b ] }
      name: workload-c
      service:
        fromTemplate:
          templateRef: ycsb.tikv.runner
          inputs:
            - { server: .service.master.any, workload: workloadc, operationcount: "1000000",}


    # Step 5: Run workload F
    - action: Service
      depends: { success: [ workload-c ] }
      name: workload-f
      service:
        fromTemplate:
          templateRef: ycsb.tikv.runner
          inputs:
            - { server: .service.master.any, workload: workloadf, operationcount: "1000000",}


    # Step 6: Run workload D.
    - action: Service
      depends: { success: [ workload-f ] }
      name: workload-d
      service:
        fromTemplate:
          templateRef: ycsb.tikv.runner
          inputs:
            - { server: .service.master.any, workload: workloadd, operationcount: "1000000",}


    # Step 7,8: Reload the data with parameters of workload E.
    # We use the dropdata field to remove all data before test.
    - action: Service
      depends: { success: [ workload-d ] }
      name: reloader
      service:
        fromTemplate:
          templateRef: ycsb.tikv.loader
          inputs:
            - { server: .service.master.any, workload: workloade, dropdata: "true", recordcount: "1000000",}

    # Step 9:Run workload E
    - action: Service
      depends: { success: [ reloader ] }
      name: workload-e
      service:
        fromTemplate:
          templateRef: ycsb.tikv.runner
          inputs:
            - { server: .service.master.any, workload: workloade, operationcount: "1000000",}
