---
apiVersion: frisbee.io/v1alpha1
kind: TestPlan
metadata:
  name: cockroach-baseline-cluster-nondeterministic
spec:
  actions:
    # Step 0. Create individual cockroach servers
    - action: Cluster
      name: masters
      cluster:
        templateRef: cockroach.cluster.master
        instances: 3
        inputs:
          - { join: "masters-0:26257,masters-1:26257,masters-2:26257" }


    # Step 1. Create a cockroach cluster from the individual servers
    - action: Call
      name: boot
      depends: { running: [ masters ] }
      call:
        callable: boot
        services: [ .cluster.masters.one ]


    # Step 2. Preload the server with keys
    - action: Service
      depends: { success: [ boot ] }
      name: loader
      service:
        templateRef: ycsb.cockroach.loader
        inputs:
          - { server: .cluster.masters.one, workload: workloada, recordcount: "1000000", threads: "40" }

    # Step 2. Run YCSB workload A
    - action: Service
      depends: { success: [ loader ] }
      name: workload-a
      service:
        templateRef: ycsb.cockroach.runner
        inputs:
          - { server: .cluster.masters.one, workload: workloada, operationcount: "1000000", threads: "40" }

    # Step 3. Run YCSB workload B
    - action: Service
      depends: { success: [ workload-a ] }
      name: workload-b
      service:
        templateRef: ycsb.cockroach.runner
        inputs:
          - { server: .cluster.masters.one, workload: workloadb, operationcount: "1000000", threads: "40" }

    # Step 4. Run YCSB workload C
    - action: Service
      depends: { success: [ workload-b ] }
      name: workload-c
      service:
        templateRef: ycsb.cockroach.runner
        inputs:
          - { server: .cluster.masters.one, workload: workloadc, operationcount: "1000000", threads: "40" }

    # Step 5. Run YCSB workload F
    - action: Service
      depends: { success: [ workload-c ] }
      name: workload-f
      service:
        templateRef: ycsb.cockroach.runner
        inputs:
          - { server: .cluster.masters.one, workload: workloadf, operationcount: "1000000", threads: "40" }

    # Step 6. Run YCSB workload D
    - action: Service
      depends: { success: [ workload-f ] }
      name: workload-d
      service:
        templateRef: ycsb.cockroach.runner
        inputs:
          - { server: .cluster.masters.one, workload: workloadd, operationcount: "1000000", threads: "40" }

    # Step 7: Reload the data with parameters of workload E.
    # Otherwise, the remaining data of the cluster might affect the results
    # We use the dropdata field to remove all data before test.
    - action: Service
      depends: { success: [ workload-d ] }
      name: reloader
      service:
        templateRef: ycsb.cockroach.loader
        inputs:
          - { server: .cluster.masters.one, workload: workloade, recordcount: "1000000", threads: "400", dropdata: "true" }


    # Step 8: Run workload E
    - action: Service
      depends: { success: [ reloader ] }
      name: workload-e
      service:
        templateRef: ycsb.cockroach.runner
        inputs:
          - { server: .cluster.masters.one, workload: workloade, operationcount: "1000000", threads: "40" }