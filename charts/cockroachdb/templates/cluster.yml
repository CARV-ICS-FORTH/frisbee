---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: cockroach.cluster.master
spec:
  inputs:
    parameters:
      join: ""
      storedir: "cockroach-data"
  service:
    decorators:
      telemetry:
        - system.telemetry.agent
        - cockroach.telemetry.server

    containers:
      - name: app
        image: cockroachdb/cockroach:latest
        ports:
          - name: grpc
            containerPort: {{.Values.port | int64}}
          - name: http
            containerPort: {{ .Values.httpPort | int64 }}
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
            trap "touch /dev/shm/stop" EXIT # Sidecar: use it to terminate itself when this container has exit.

            # Required for installing xargs
            microdnf install findutils procps nc

            # Set local variables
            storedir={{"{{.Inputs.Parameters.storedir}}"}}
            nodeList={{"{{.Inputs.Parameters.join}}"}}

            echo "Start Cockroachdb: ${nodeList}"

            COCKROACH_CRASH_ON_SPAN_USE_AFTER_FINISH=true cockroach start   \
                --insecure                                      \
                --store=${storedir}                             \
                --listen-addr=:{{.Values.port}}                            \
                --http-addr=$${HOSTNAME}:{{.Values.httpPort}}                   \
                --advertise-addr=$${HOSTNAME}:{{.Values.port}}             \
                --join=${nodeList}



    callables:
      boot:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            cockroach init --insecure

      import-tpcc:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            ./cockroach workload fixtures import tpcc --warehouses=100 --fks=false --checks=false

      bitrot:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -euo pipefail

            # Set local variables
            storedir={{"{{.Inputs.Parameters.storedir}}"}}
            nTables=6

            # find 6 random SST files on each node (abort if node has fewer)
            SSTs=($(ls -tr ${storedir}/MANIFEST-* | tail -n1 |                            \
            xargs ./cockroach debug pebble manifest dump |                                \
            grep -v added | grep -v deleted | grep '/Table/' |                            \
            shuf | tail -n ${nTables}))

            # abort if we have less than 6
            if (( ${#SSTs[@]} < ${nTables} )); then
              echo "No sufficient SSTs found" >&2
              # ... The rest of the debugging logic ...
              exit -1
            fi

            # corrupt the SSTs
            for i in "${SSTs[@]}"
            do
              file=${storedir}/$(echo $i | cut -d ':' -f 1)
              echo "Corrupting ${file}.sst"

              dd if=/dev/urandom of=${file}.sst seek=256 count=128 bs=1 conv=notrunc
            done

      run-workload:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            ./cockroach workload run tpcc --warehouses=100 --tolerate-errors


      test2-import-tpcc:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            ./cockroach workload fixtures import tpcc --warehouses=1

      test2-wait-for-3x-replication:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -euo pipefail

            # WaitFor3XReplication waits until all ranges in the system are on at least three voters.
            oldN=0
            for (( ; ; ))
            do
              n=$(./cockroach sql --insecure --format=records                                             \
              --execute="SELECT count(1) FROM crdb_internal.ranges WHERE array_length(replicas, 1) < 3;"  \
              | grep "count" | cut -d "|" -f 2)

              if [ "${n}" -eq "0" ]
              then
                echo "All replicas are in place"
                exit 0
              fi

              if [ oldN != ${n}  ]
              then
                echo "still waiting for full replication (${n} ranges left)"
              fi

              oldN=${n}

              echo "Sleep"
              sleep 2
            done

      test2-run-workload:
        container: app
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum

            ./cockroach workload run tpcc --warehouses=1 --wait=false --histograms=/stats.json --duration=30m
