---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    decorators:
      telemetry: [ system.telemetry.agent ]
      resources:
        cpu: "1"
        memory: "48Mi"
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command:
          - /bin/sh
          - -c
          - |
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
            
            iperf -s -f m -i 5

---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
  service:
    decorators:
      telemetry:
        - system.telemetry.agent
    containers:
      - name: app
        image: czero/iperf2
        ports:
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app
            
            iperf -c {{.Inputs.Parameters.target}} -t 500

---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: revoke-failure
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    - action: Service
      name: client
      depends: { running: [ server ] }
      service:
        templateRef: iperf.client
        inputs:
          - { target: server }

    # Inject a network failure, after 1 minute
    - action: Chaos
      name: partition
      depends: { running: [ client ], after: "1m" }
      chaos:
        templateRef: system.chaos.network.partition.partial
        inputs:
          - { source: server, dst: client }

    # Repair the partition (by deleting the chaos job), after 3 minutes
    - action: Delete
      name: repair-partition
      depends: { after: "3m" }
      delete:
        jobs: [ partition ]


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [ server, client ], success: [ repair-partition ] } # Notice: Partition is a finite action
      delete:
        jobs: [ server, client ]