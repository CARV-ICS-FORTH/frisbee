---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    decorators:
      resources:
        cpu: "1"
        memory: "48Mi"
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            # Run the iperf server in the background
            iperf -s -f -m -i 5 &
            
            # Gracefully terminate after the given period
            sleep 60 && exit 0
            


---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
      duration: "60"
  service:
    containers:
      - name: app
        image: czero/iperf2
        command: [ iperf ]
        args: [ "-c", "{{.Inputs.Parameters.target}}", "-t", "{{.Inputs.Parameters.duration}}" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: assertions
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    - action: Cluster
      name: clients
      depends: { running: [ server ] }  # Depends are pre-execution conditions
      assert:                           # Assert are post-execution conditions
        state: '{{.IsRunning "server"}} || {{.IsTerminating "server"}}'
      cluster:
        templateRef: iperf.client
        inputs:
          - { target: server, duration: "120" }
          - { target: server, duration: "120" }
          - { target: server, duration: "120" }


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [server], success: [clients]}
      delete:
        jobs: [ clients, server ]