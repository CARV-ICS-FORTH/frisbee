apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: elasticity
spec:
  importMonitors: [ "sysmon/container", "redismon/telegraf", "ycsbmon/goycsb" ]
  ingress:
    host: platform.science-hangar.eu

  actions:
    # Create a Master node
    - actiontype: DistributedGroup
      name: "masters"
      distributedGroup:
        domain: jedi7.cluster.ics.forth.gr
        templateRef: redis/master
        instances: 1

    # Wait for master node to become ready, and ingest 100K non-overlapping keys, with 10 parallel clients
    - actiontype: DistributedGroup
      name: "loaders"
      depends: { running: [ masters ] }
      distributedGroup:
        domain: jedi6.cluster.ics.forth.gr
        templateRef: redis/loader
        inputs:
          - { server: .group.masters.any, recordcount: "5000000", offset: "0" }
          - { server: .group.masters.any, recordcount: "5000000", offset: "5000000" }
          - { server: .group.masters.any, recordcount: "5000000", offset: "10000000" }
          - { server: .group.masters.any, recordcount: "5000000", offset: "15000000" }
          - { server: .group.masters.any, recordcount: "5000000", offset: "20000000" }
          #- { server: .group.masters.any, recordcount: "5000000", offset: "25000000" }
          #- { server: .group.masters.any, recordcount: "5000000", offset: "30000000" }
          #- { server: .group.masters.any, recordcount: "5000000", offset: "35000000" }
          #- { server: .group.masters.any, recordcount: "5000000", offset: "40000000" }
        schedule:
          cron: "@every 2m"

    # The loaders will be become running when all the loaders are running. Therefore, we need to put the
    # offset from the creation of the last instance.
    - actiontype: Stop
      name: "teardown"
      depends: { running: [ loaders ], duration: "2m" }
      stop:
        selector: { macro: .group.loaders.any }


    # Wait until servers are removed
    - actiontype: Wait
      name: "terminate"
      wait:
        success: [ masters ]