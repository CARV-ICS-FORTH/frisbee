apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: redis-failover
spec:
  importMonitors: [ "sysmon/container", "redismon/telegraf", "ycsbmon/goycsb" ]
  ingress: localhost

  actions:
    # Create a Master node
    - actiontype: ServiceGroup
      name: masters
      servicegroup:
        templateRef: redis/master
        instances: 1

    # Create a Slave node
    - actiontype: ServiceGroup
      name: slaves
      depends: { running: [ masters ] }
      servicegroup:
        templateRef: redis/slave
        inputs:
          - { master: .servicegroup.masters.one }


    # Create a failover manager
    - actiontype: ServiceGroup
      name: sentinel
      depends: { running: [ masters, slaves ] }
      servicegroup:
        templateRef: redis/sentinel
        inputs:
          - { master: .servicegroup.masters.one }


    # Ingest keys in parallel into different ranges
    - actiontype: ServiceGroup
      name: loaders
      depends: { running: [ masters ] }
      servicegroup:
        templateRef: redis/loader
        inputs:
          - { server: .servicegroup.masters.one, recordcount: "100000", offset: "0" }

    # Run queries
    - actiontype: ServiceGroup
      name: runners
      depends: { running: [ masters ], success: [ loaders ] }
      servicegroup:
        templateRef: redis/runner
        inputs:
          - { server: .servicegroup.masters.one, workload: workloada,  operationcount: "100000" }


    # Repeatable partition failures
    - actiontype: Chaos
      name: partition0
      depends: { running: [ masters], duration: "10s" }
      chaos:
        type: partition
        partition:
          selector:
            macro: .servicegroup.masters.one
          duration: "2m"


#    - actiontype: Chaos
#      name: partition1
#      depends: { running: [ masters, runners ], duration: "3m" }
#      chaos:
#        type: partition
#        partition:
#          selector:
#            macro: .servicegroup.masters.one
#          duration: "2m"


    # Stop the master nodes after a few minutes
#    - actiontype: Stop
#      name: "teardown"
#      depends: { duration: 1m }
#      stop:
#        selector:
#          macro: .servicegroup.runners.all
#        schedule:
#          cron: "@every 1m"

    # Wait until servers are removed
    - actiontype: Wait
      name: "terminate"
      wait:
        success: [ masters ]