---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  inputs:       # Inputs allows for parameterized resources
    parameters:
      memory: ""
      cpu: ""

  service:
    decorators: # Decorators wrap Pod definitions with some nice features
      resources:
        cpu: { { "{{.Inputs.Parameters.cpu}}" } }
        memory: { { "{{.Inputs.Parameters.memory}}" } }

    containers:
      - name: app
        image: czero/iperf2
        command: [ iperf ]
        args: [ "-s", "-f", "m", "-i", "5" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
      duration: "60"
  service:
    containers:
      - name: app
        image: czero/iperf2
        command: [ iperf ]
        args: [ "-c", "{{.Inputs.Parameters.target}}", "-t", "{{.Inputs.Parameters.duration}}" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: resource-throttling
spec:
  actions:
    # Create an iperf server
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    # Create a set of iperf clients
    - action: Cluster
      name: clients
      depends: { running: [ server ] }
      assert:
          state: '{{.NumSuccessfulJobs}} >= 6'
      cluster:
        templateRef: iperf.client
        instances: 10 # Create 10 instances, by reusing the same 3 inputs.
        inputs:
          - { target: server, duration: "10", cpu: "0.4", memory: "50Mi"  }
          - { target: server, duration: "20", cpu: "1", memory: "50i"  }
          - { target: server, duration: "30", cpu: "1.2", memory: "50i"  }
        schedule:
          cron: "@every 1m"