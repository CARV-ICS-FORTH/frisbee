---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: cockroach-network
spec:
  actions:
    # Step 0. provision 4 individual servers
    - action: Cluster
      name: masters
      cluster:
        templateRef: frisbee.apps.cockroach.server
        instances: 4
        inputs:
          - { join: "masters-1:26257,masters-2:26257,masters-3:26257,masters-4:26257" }

    # Step 1. Create a cockroach cluster from the individual servers
    - action: Call
      name: boot
      depends: { running: [ masters ] }
      call:
        callable: boot
        services: [ masters-1 ]
        expect:
          - { stdout: "Cluster successfully initialized.*" }

    # Step 2. import data to the workload node (node 1)
    - action: Service
      depends: { success: [ boot ] }
      name: import-workload
      service:
        templateRef: frisbee.apps.ycsb.cockroach.loader
        inputs:
          - { server: masters-1, workload: workloada, recordcount: "10000", threads: "16", delay: "15" }

    # Step 3. wait for 3x replication
    # Alternatively, wait for "Under-replicated" metric from Grafana to become 0
    - action: Call
      name: wait-for-3x-replication
      depends: { success: [ import-workload ] }
      call:
        callable: wait-for-3x-replication
        services: [ masters-1 ]

    # Step 4A. run workload for up-to 10 mins (node1)
    - action: Service
      depends: { success: [ wait-for-3x-replication  ] }
      name: run-workload
      service:
        templateRef: frisbee.apps.ycsb.cockroach.runner
        inputs:
          - { server: masters-1, workload: workloada, operationcount: "100000000", threads: "4" }

    # Step4B. partition node 1 from the rest of the nodes; node 1 can reach other nodes, but no other nodes can reach node 1
    - action: Chaos
      name: partition0
      depends: { success: [ wait-for-3x-replication ], after: "5m" } # give tpcc a head start
      chaos:
        templateRef: frisbee.system.chaos.network.partition.partial
        inputs:
          - { source: masters-1, duration: 5m , direction: "to", dst: "masters-2, masters-3, masters-4" }

    # Teardown
    - action: Delete
      name: teardown
      depends: { running: [ masters ], success: [ partition0, run-workload ] }
      delete:
        jobs: [ masters ]