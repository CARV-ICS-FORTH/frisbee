---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    decorators:
      resources:
        cpu: "1"
        memory: "48Mi"
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command: [ iperf ]
        args: [ "-s", "-f", "m", "-i", "5" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
      duration: "60"
      memory: ""
      cpu: ""

  service:
    decorators: # Decorators wrap Pod definitions with some nice features
      resources:
        cpu: "{{.inputs.parameters.cpu}}"
        memory: "{{.inputs.parameters.memory}}"
    containers:
      - name: app
        image: czero/iperf2
        command: [ iperf ]
        args: [ "-c", "{{.inputs.parameters.target}}", "-t", "{{.inputs.parameters.duration}}" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: resource-throttling
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    - action: Cluster
      name: clients
      depends: { running: [ server ] }
      cluster:
        templateRef: iperf.client
        instances: 10
        # Create a variety of clients with different resources
        inputs:
          - { target: server, duration: "120", cpu: "0.4", memory: "48Mi" }
          - { target: server, duration: "120", cpu: "1", memory: "49Mi" }
          - { target: server, duration: "120", cpu: "1.2", memory: "50Mi" }


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [ server ], success: [ clients ] }
      delete:
        jobs: [ server ]