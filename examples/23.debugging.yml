---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command: [ iperf ]
        args: [ "-s", "-f", "m", "-i", "5" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
      duration: "60"
  service:
    containers:
      - name: app
        image: czero/iperf2
        command: [ iperf ]
        args: [ "-c", "{{.inputs.parameters.target}}", "-t", "{{.inputs.parameters.duration}}" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: debugging
spec:
  actions:
    # Create an iperf server
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    # Create an iperf client
    - action: Cluster
      name: client
      depends: { running: [ server ] }
      cluster:
        templateRef: iperf.client
        inputs:
          - { target: server }
        # Ignore any potential failure of the client
        tolerate:
          failedJobs: 1

    - action: Service
      name: debugger
      service:
        templateRef: system.tools.debugger

    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      # With this label, the service will keep running at the end of the experiment
      depends: { running: [ server ], success: [ client, debugger ] }
      delete:
        jobs: [ server ]