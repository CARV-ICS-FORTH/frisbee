---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command: [ iperf ]
        resources:
          limits:
            cpu: "0.2"
            memory: "500Mi"
        args: [ "-s", "-f", "m", "-i", "5" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
  service:
    containers:
      - name: app
        image: czero/iperf2
        command: [ iperf ]
        args: [ "-c", "{{.inputs.parameters.target}}", "-t", "500" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: delete-job
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    # Create a Client
    - action: Service
      name: client
      depends: { running: [ server ] }
      service:
        templateRef: iperf.client
        inputs:
          - { target: server }

    # Delete the client, after 1 minute
    - action: Delete
      name: delete-client
      depends: { after: "1m" }
      delete: # referenced jobs should be actions.
        jobs: [ client ]


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [ server ], success: [ delete-client ] } # # Notice: dependency to a Delete action.
      delete:
        jobs: [ server ]