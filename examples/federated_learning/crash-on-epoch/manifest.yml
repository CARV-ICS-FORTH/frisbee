# This experiment is designed for injecting network partition fault at a specific epoch.
---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: fault-on-epoch
spec:
  actions:
    # Step 1: Create FedBed server
    - action: Service
      name: server
      service:
        templateRef: fedbed.server
        inputs:
          - { backend: "pytorch", min_fit_clients: 4, min_available_clients: 5 }

    # Step 2: Create FedBed clients
    - action: Cluster
      name: clients
      depends: { running: [ server ] }
      cluster:
        templateRef: fedbed.client
        resources:
          total: { cpu: 10, mem: 40Gi }
          distribution: { name: uniform }
        inputs:
          - { fl_server: server, backend: "pytorch",  total_nodes: 5, node_id: 0 }
          - { fl_server: server, backend: "pytorch",  total_nodes: 5, node_id: 1 }
          - { fl_server: server, backend: "pytorch",  total_nodes: 5, node_id: 2 }
          - { fl_server: server, backend: "pytorch",  total_nodes: 5, node_id: 3 }
          - { fl_server: server, backend: "pytorch",  total_nodes: 5, node_id: 4 }
        tolerate:
          failedJobs: 1

    # Step 3: Wait for a specific (hardcoded) round.
    - action: Call
      name: wait-for-round
      depends: { running: [ server ] }
      call:
        callable: wait-for-round
        services: [server]

    # Step 4: After 2 minutes, kill one client, and 1 minutes later, kill another client.
    - action: Cascade
      name: killer
      depends: { success: [ wait-for-round ] }
      cascade:
        templateRef: system.chaos.pod.kill
        inputs:
          - { target: clients-1 }
          - { target: clients-3 }
        schedule:
          cron: "@every 1m"


    # Teardown
    - action: Delete
      name: teardown
      depends: { success: [ clients, killer ] }
      delete:
        jobs: [ server ]
