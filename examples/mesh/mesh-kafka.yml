---
#
# Instantiate centralized Kafka
#
apiVersion: v1
kind: Service
metadata:
  name: zoo1
  labels:
    app: zookeeper-1
spec:
  ports:
    - name: client
      port: 2181
      protocol: TCP
    - name: follower
      port: 2888
      protocol: TCP
    - name: leader
      port: 3888
      protocol: TCP
  selector:
    app: zookeeper-1

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: zookeeper-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper-1
  template:
    metadata:
      labels:
        app: zookeeper-1
    spec:
      containers:
        - name: zoo1
          image: digitalwonderland/zookeeper
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_ID
              value: "1"
            - name: ZOOKEEPER_SERVER_1
              value: zoo1

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  labels:
    name: kafka
spec:
  ports:
    - port: 9092
      name: kafka-port
      protocol: TCP
  selector:
    app: kafka
    id: "0"
  type: ClusterIP


---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: kafka-broker0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
      id: "0"
  template:
    metadata:
      labels:
        app: kafka
        id: "0"
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_BROKER_ID
              value: "0"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-service:9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zoo1:2181
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CREATE_TOPICS
              value: admintome-test:1:1


---
#
# Create Producer Service
#
apiVersion: frisbee.io/v1alpha1
kind: Service
metadata:
  name: kafka-producer
spec:
  container:
    name: producer-app
    image: solsson/kafka:0.11.0.0
    env:
      - name: kafkaHost
        value: kafka-service
      - name: kafkaPort
        value: "9092"
    command:
      - /bin/sh # Run shell
      - -c # Read from string
      - |  # Multi-line str
        set -eum
        trap "touch /dev/shm/stop" EXIT

        seq 1 100 |                             \
        bin/kafka-console-producer.sh           \
        --broker-list  $kafkaHost:$kafkaPort    \
        --topic my-topic

        sleep 3600
---
#
# Create Consumer
#
apiVersion: frisbee.io/v1alpha1
kind: Service
metadata:
  name: kafka-consumer
spec:
  container:
    name: consumer-app
    image: solsson/kafka:0.11.0.0
    env:
      - name: kafkaHost
        value: kafka-service
      - name: kafkaPort
        value: "9092"
    command:
      - /bin/sh # Run shell
      - -c # Read from string
      - |  # Multi-line str
        set -eum
        trap "touch /dev/shm/stop" EXIT

        bin/kafka-console-consumer.sh                       \
        --bootstrap-server $kafkaHost:$kafkaPort            \
        --topic my-topic                                    \
        --from-beginning

        sleep 3600


---
#
# Create an always-running client for the execution of kafka commands from the CLI.
# Usage example:
# kubectl -n frisbee2 exec -ti testclient -- ./bin/kafka-console-producer.sh --broker-list  kafka-service:9092 --topic my-topic
apiVersion: v1
kind: Pod
metadata:
  name: testclient
spec:
  containers:
    - name: kafka
      image: solsson/kafka:0.11.0.0
      command:
        - sh
        - -c
        - "exec tail -f /dev/null"