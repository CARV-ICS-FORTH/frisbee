---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    decorators:
      telemetry: [ system.telemetry.agent ]
      resources:
        cpu: "1"
        memory: "48Mi"
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command:
          - /bin/sh
          - -c
          - |
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
            
            iperf -s -f m -i 5

---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
  service:
    decorators:
      telemetry:
        - system.telemetry.agent
      resources:
        cpu: "0.2"
        memory: "48Mi"
    containers:
      - name: app
        image: czero/iperf2
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app
            
            iperf -c {{.inputs.parameters.target}} -t 360

---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: sla-assertions
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    - action: Service
      name: client
      depends: { running: [ server ] }
      assert:
        metrics: "avg() of query(summary/152/rx-max, 1m, now) is below(-3000000000)"
      service:
        templateRef: iperf.client
        inputs:
          - { target: server }

    # Create a cluster of noisy neighbors
    - action: Cluster
      name: noisy-neighbors
      depends: { running: [ server ] }
      cluster:
        templateRef: iperf.client
        instances: 5
        inputs:
          - { target: server }
        schedule:
          cron: "@every 1m"


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [ server ], success: [ client, noisy-neighbors ] } # Notice: Killing is regarded as a 'looping' action.
      delete:
        jobs: [ server ]