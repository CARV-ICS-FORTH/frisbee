---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    containers:
      - name: main
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        resources:
          limits:
            cpu: "0.2"
            memory: "500Mi"
        command: [ iperf ]
        args: [ "-s", "-f", "m", "-i", "5" ]


---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
      duration: "60"
      exit: "false"
  service:
    containers:
      - name: main
        image: czero/iperf2
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            # Compare the input, and exit if needed
            [[ {{.inputs.parameters.exit}} == "true" ]] && echo "Force exit" && exit -1
            
            # Otherwise, continue as normal
            iperf -c {{.inputs.parameters.target}} -t {{.inputs.parameters.duration}} 


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: tolerate-failures
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    - action: Cluster
      name: clients
      depends: { running: [ server ] }
      cluster:
        templateRef: iperf.client
        instances: 10
        inputs:
          - { target: server, duration: "10" }
          - { target: server, duration: "20", exit: "true" }
          - { target: server, duration: "30" }
        schedule:
          cron: "@every 1m"
        # Tolerate up to 2 failing clients, before the cluster fails itself
        tolerate:
          failedJobs: 3


    # When all actions are done, delete looping servers to gracefully exit the experiment
    - action: Delete
      name: teardown
      depends: { running: [ server ], success: [ clients ] }
      delete:
        jobs: [ server ]