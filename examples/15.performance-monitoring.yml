---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.server
spec:
  service:
    decorators:   # Add support for Telemetry
      telemetry: [system.telemetry.agent]
    containers:
      - name: app
        image: czero/iperf2
        ports:
          - name: listen
            containerPort: 5001
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
              set -eum
              cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
              
              iperf -s -f m -i 5



---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: iperf.client
spec:
  inputs:
    parameters:
      target: localhost
  service:
    decorators:
      telemetry:                  # Register Telemetry Agents
        - system.telemetry.agent  # Collect Generic System's Metrics
        - iperf2.telemetry.client # Collect App Specific Metrics
    containers:
      - name: app
        image: czero/iperf2
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
              set -eum
              cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup
  
              iperf -c {{.Inputs.Parameters.target}} -t 500 > /dev/shm/pipe


---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: performance-monitoring
spec:
  actions:
    - action: Service
      name: server
      service:
        templateRef: iperf.server

    # Create a first cluster
    - action: Cluster
      name: group-a
      depends: { running: [ server ] }
      cluster:
        templateRef: iperf.client
        instances: 3
        inputs:
          - { target: server }

    # Create a second cluster
    - action: Cluster
      name: group-b
      depends: { running: [ server ] }
      cluster:
        templateRef: iperf.client
        instances: 3
        inputs:
          - { target: server }

    # Delete the second cluster.
    - action: Delete
      name: delete-group-b
      depends: { running: [ group-b ],  after: "30s" }
      delete: # references jobs should be action.
        jobs: [ group-b ]

