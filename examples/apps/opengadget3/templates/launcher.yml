---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: frisbee.apps.mpi-launcher
spec:
  inputs:
    parameters:
      numOfWorkers: 0
  service:
    # Add monitoring sidecars
    decorators:
      telemetry: [ frisbee.system.telemetry.resources ]
    volumes:
      # declare ssh volume
      - name: ssh-volume
        configMap:
          name: ssh-config
      # declare mpi volume
      - name: mpi-volume
        emptyDir: {}
      # declare dataset volume
      - name: dataset-volume
        hostPath:
          path: {{.Values.datasetPath}}
    # Populate the hostfile with workers.
    initContainers:
      - name: populate-workers
        image: busybox
        volumeMounts:
          - name: mpi-volume
            mountPath: /etc/mpi/
        # Use the dynamic inputs are environment variables
        env:
          - name: numOfWorkers
            value: {{"{{.inputs.parameters.numOfWorkers}}" | quote}}
        # Dynamically populate the hostfile with workers.
        command:
          - /bin/sh
          - -c
          - |
            set -eux

            for i in $( seq 1 $numOfWorkers); do
              echo "workers-${i}.{{.Release.Namespace}}.default.svc slots=1" >> /etc/mpi/hostfile
              echo "Added worker $i"
            done
    containers:
      - image: icsforth/opengadget3:boxes_32
        # imagePullPolicy: Always
        name: main
        volumeMounts:
          # ssh
          - name: ssh-volume
            mountPath: /home/mpiuser/.ssh
          # mpi / hostfile
          - name: mpi-volume
            mountPath: /etc/mpi
          # common_files
          - name: dataset-volume
            subPath: common_files
            mountPath: /u/eupex/code/OpenGadget3/common_files
          # paramfiles
          - name: dataset-volume
            subPath: paramfiles
            mountPath: /u/eupex/code/OpenGadget3/paramfiles
          # initial_conditions
          - name: dataset-volume
            subPath: initial_conditions
            mountPath: /u/eupex/code/OpenGadget3/initial_conditions
        # Use the dynamic inputs are environment variables
        env:
          - name: numOfWorkers
            value: {{"{{.inputs.parameters.numOfWorkers}}" | quote}}
        # Run as the container user
        securityContext:
          runAsUser: 1000
        command:
          - /bin/bash
          - -c
          - |
            set -eux
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup

            export MPIJOBS=${numOfWorkers}
            export CONFIG=boxes_32

            /u/eupex/docker-entrypoint.sh
