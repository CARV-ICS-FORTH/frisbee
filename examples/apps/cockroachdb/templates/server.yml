---
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: frisbee.apps.cockroach.server
spec:
  inputs:
    parameters:
      join: ""
      datadir: "cockroach-data"
  service:
    decorators:
      telemetry:
        - frisbee.apps.cockroach.server.telemetry
        - frisbee.system.telemetry.resources

    volumes: # Create an ephemeral volume, backed by a file
      - name: scratch-volume
        ephemeral:
          volumeClaimTemplate:
            spec:
              storageClassName: platform.storageclass.local
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: {{.Values.server.storage}}

    containers:
      - name: main
        image: {{.Values.server.image}}
        volumeMounts: # Server's scratch storage
          - name: scratch-volume
            mountPath: /store

        resources: # Server's default resources.
          requests:
            cpu: {{.Values.server.cpu}}
            memory: {{.Values.server.memory}}
          limits:
            cpu: {{.Values.server.cpu}}
            memory: {{.Values.server.memory}}

        ports: # Server's listening ports
          - name: grpc
            containerPort: {{.Values.server.port}}
          - name: web
            containerPort: {{ .Values.server.webPort}}

        command:  # Server's entrypoint script.
          - /bin/sh
          - -c
          - |
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup

            # Required for installing xargs
            microdnf update --nodocs
            microdnf install findutils procps nc

            # Set local variables
            datadir=/store/{{"{{.inputs.parameters.datadir}}"}}
            nodeList={{"{{.inputs.parameters.join}}"}}

            echo "Start Cockroachdb: ${nodeList}"

            COCKROACH_CRASH_ON_SPAN_USE_AFTER_FINISH=true cockroach start   \
                --insecure                                      \
                --store=${datadir}                             \
                --listen-addr=:{{.Values.port}}                            \
                --http-addr=$${HOSTNAME}:{{.Values.httpPort}}                   \
                --advertise-addr=$${HOSTNAME}:{{.Values.port}}             \
                --join=${nodeList}

#        startupProbe:
 #         httpGet:
  #          path: /health
   #         port: http
    #      initialDelaySeconds: 5
     #     failureThreshold: 30
      #    periodSeconds: 10

       # livenessProbe:
        #  httpGet:
         #   path: /health
          #  port: http
        #  initialDelaySeconds: 30
        #  periodSeconds: 5

    callables:
      boot:
        container: main
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum
            cockroach init --insecure

      bitrot:
        container: main
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -euo pipefail

            # Set local variables
            datadir=/store/{{"{{.inputs.parameters.datadir}}"}}
            nTables=6

            # find 6 random SST files on each node (abort if node has fewer)
            SSTs=($(ls -tr ${datadir}/MANIFEST-* | tail -n1 |                            \
            xargs ./cockroach debug pebble manifest dump |                                \
            grep -v added | grep -v deleted | grep '/Table/' |                            \
            shuf | tail -n ${nTables}))

            # abort if we have less than 6
            if (( ${#SSTs[@]} < ${nTables} )); then
              echo "No sufficient SSTs found" >&2
              # ... The rest of the debugging logic ...
              exit -1
            fi

            # corrupt the SSTs
            for i in "${SSTs[@]}"
            do
              file=${datadir}/$(echo $i | cut -d ':' -f 1)
              echo "Corrupting ${file}.sst"

              dd if=/dev/urandom of=${file}.sst seek=256 count=128 bs=1 conv=notrunc
            done


      wait-for-3x-replication:
        container: main
        command:
          - /bin/sh   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -euo pipefail

            # WaitFor3XReplication waits until all ranges in the system are on at least three voters.
            oldN=0
            for (( ; ; ))
            do
              n=$(./cockroach sql --insecure --format=records                                             \
              --execute="SELECT count(1) FROM crdb_internal.ranges WHERE array_length(replicas, 1) < 3;"  \
              | grep "count" | cut -d "|" -f 2)

              if [ "${n}" -eq "0" ]
              then
                echo "All replicas are in place"
                exit 0
              fi

              if [ oldN != ${n}  ]
              then
                echo "still waiting for full replication (${n} ranges left)"
              fi

              oldN=${n}

              echo "Sleep"
              sleep 2
            done