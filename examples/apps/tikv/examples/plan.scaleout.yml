---
# This experiment runs a given load for various numbers of TikV instance.
# This goal is to find the maximum number of TikV servers after which the overall performance does not increase further.
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: tikv-scaleout
spec:
  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: coordinator
      service:
        templateRef: frisbee.apps.tikv.pd.coverage

    - action: Cluster
      depends: { running: [ coordinator ] }
      name: workers
      cluster:
        templateRef: frisbee.apps.tikv.worker
        instances: 256
        inputs:
          - { placementDriver: coordinator }


    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Cluster
      name: loaders
      depends: { running: [ coordinator, workers ] }
      cluster:
        templateRef: frisbee.apps.ycsb.tikv.loader
        inputs:
          - { server: coordinator, recordcount: "100000000000", offset: "0", threads: "32" }


    # Teardown
    - action: Delete
      name: teardown
      depends: { running: [ coordinator, workers ], success: [ loaders ] }
      delete:
        jobs: [ coordinator,  workers ]