---
apiVersion: frisbee.dev/v1alpha1
kind: Scenario
metadata:
  name: tikv-baseline
spec:
  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: coordinator
      service:
        templateRef: frisbee.apps.tikv.pd.coverage

    - action: Cluster
      depends: { running: [ coordinator ] }
      name: workers
      cluster:
        templateRef: frisbee.apps.tikv.worker
        instances: 3
        inputs:
          - { placementDriver: coordinator }

    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Service
      depends: { running: [ workers ] }
      name: loader
      service:
        templateRef: frisbee.apps.ycsb.tikv.loader
        inputs:
          - { server: coordinator, workload: workloada, recordcount: "10000000", threads: "4" }

    # Step 2: Run workload A
    - action: Service
      depends: { success: [ loader ] }
      name: workload-a
      service:
        templateRef: frisbee.apps.ycsb.tikv.runner
        inputs:
          - { server: coordinator, workload: workloada, operationcount: "1000000", threads: "4" }

    # Step 3: Run workload B
    - action: Service
      depends: { success: [ workload-a ] }
      name: workload-b
      service:
        templateRef: frisbee.apps.ycsb.tikv.runner
        inputs:
          - { server: coordinator, workload: workloadb, operationcount: "1000000", threads: "4" }

    # Step 4: Run workload C
    - action: Service
      depends: { success: [ workload-b ] }
      name: workload-c
      service:
        templateRef: frisbee.apps.ycsb.tikv.runner
        inputs:
          - { server: coordinator, workload: workloadc, operationcount: "1000000", threads: "4" }

    # Step 5: Run workload F
    - action: Service
      depends: { success: [ workload-c ] }
      name: workload-f
      service:
        templateRef: frisbee.apps.ycsb.tikv.runner
        inputs:
          - { server: coordinator, workload: workloadf, operationcount: "1000000", threads: "4" }


    # Step 6: Run workload D.
    - action: Service
      depends: { success: [ workload-f ] }
      name: workload-d
      service:
        templateRef: frisbee.apps.ycsb.tikv.runner
        inputs:
          - { server: coordinator, workload: workloadd, operationcount: "1000000", threads: "4" }


    # Step 7,8: Reload the data with parameters of workload E.
    # We use the dropdata field to remove all data before test.
    - action: Service
      depends: { success: [ workload-d ] }
      name: reloader
      service:
        templateRef: frisbee.apps.ycsb.tikv.loader
        inputs:
          - { server: coordinator, workload: workloade, dropdata: "true", recordcount: "1000000", threads: "4" }

    # Step 9:Run workload E
    - action: Service
      depends: { success: [ reloader ] }
      name: workload-e
      service:
        templateRef: frisbee.apps.ycsb.tikv.runner
        inputs:
          - { server: coordinator, workload: workloade, operationcount: "1000000", threads: "4" }


    # Teardown
    - action: Delete
      name: teardown
      depends: { running: [ coordinator, workers ], success: [ workload-e ] }
      delete:
        jobs: [ coordinator, workers ]