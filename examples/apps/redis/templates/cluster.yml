---
# Master server handling a keyspace
# Every Redis Cluster node has an additional TCP port for receiving incoming connections from other
# Redis Cluster nodes. This port is at a fixed offset from the normal TCP port used to receive incoming
# connections from clients. To obtain the Redis Cluster port, 10000 should be added to the normal commands port.
# For example, if a Redis node is listening for client connections on port 6379,
# the Cluster bus port 16379 will also be opened.
#
# In certain deployments, Redis Cluster nodes address discovery fails, because
# addresses are NAT-ted or because ports are forwarded (the typical case is
# Docker and other containers).
#
# In order to make Redis Cluster working in such environments, a static
# configuration where each node knows its public address is needed.
#
# Without this wraparound, the bootstrap stuck forever with the notorious "Waiting for the cluster to join".
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: redis.cluster.master
spec:
  inputs:
    parameters:
      join: ""
  service:
    decorators: # Decorators
      telemetry:
        - frisbee.system.telemetry.resources
        - redis.telemetry.server

    containers: # Container
      - name: main
        image: redis
        ports:
          - name: to-clients
            containerPort: 6379
          - name: to-cluster
            containerPort: 16379
        env:
          - name: podIP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        command:
          - /bin/bash   # Run shell
          - -c          # Read from string
          - |           # Multi-line str
            set -eum
            cut -d ' ' -f 4 /proc/self/stat > /dev/shm/app # Sidecar: use it for entering the cgroup

            echo "Create Redis configuration"
            cat > redis.conf <<EOF
              port 6379
              appendonly yes
              cluster-enabled yes
              cluster-config-file nodes.conf
              cluster-node-timeout 5000

              cluster-announce-ip ${podIP}
              cluster-announce-port 6379
              cluster-announce-bus-port 16379
            EOF

            echo "Starting Redis node at ${podIP}:6379"
            redis-server redis.conf &

            servers=( {{"{{.inputs.parameters.join}}"}} )
            if [ ${#servers[@]} -gt 0 ]; then
              echo "Join cluster by contacting ${servers[*]}"

              ips=($(getent hosts ${servers[*]} | awk '{print $1}'))

              all=()
              for i in ${!ips[*]}; do
                all[i]=$(echo ${ips[$i]} 6379)
              done

              echo "Connecting ${podIP}:6379 to ${all[*]}"
              redis-cli -h ${podIP} -p 6379 CLUSTER MEET ${all[*]}
            fi

            echo "Listening for connections"
            tail -f /dev/null

        livenessProbe:
          exec:
            command:
              - /bin/sh   # Run shell
              - -c        # Read from string
              - |         # Multi-line str
                set -eum

                response=$(timeout -s QUIT 30 redis-cli -h localhost -p 6379 ping)
                if ["$response" != "PONG"]; then
                    exit 1
                fi



---
# Combine servers into a cluster
# Because Redis requires IPS instead of hosts, we have to manually translate the given names to ips.
# The servers are expected to be given in the form "Masters-0 Masters-1 Masters-2 ...."
apiVersion: frisbee.dev/v1alpha1
kind: Template
metadata:
  name: redis.cluster.bootstrap
spec:
  inputs:
    parameters:
      servers: localhost
      delay: "0"
  service:
    containers:
      - name: main
        image: redis
        command:
          - /bin/bash   # Run shell
          - -c        # Read from string
          - |         # Multi-line str
            set -eum

            servers=( {{"{{.inputs.parameters.servers}}"}} )

            echo "Create cluster from ${servers[*]}"

            ips=($(getent hosts ${servers[*]} | awk '{print $1}'))

            all=()
            for i in ${!ips[*]}; do
              all[i]=$(echo ${ips[$i]}:6379)
            done

            echo "Create cluster from ${all[*]}"

            # Sleep a bit to compensate for Kubernetes delays.
            sleep {{"{{.inputs.parameters.delay}}"}}

            redis-cli --cluster create --cluster-yes ${all[*]}
