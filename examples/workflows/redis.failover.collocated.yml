apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: redis-failover
spec:
  importMonitors: [ "sysmon/container", "redismon/telegraf", "ycsbmon/goycsb" ]
  ingress: localhost

  actions:
    # Create a Master node
    - actiontype: CollocatedGroup
      name: masters
      collocatedGroup:
        templateRef: redis/master
        instances: 1

    # Create a Slave node
    - actiontype: CollocatedGroup
      name: slaves
      depends: { running: [ masters ] }
      collocatedGroup:
        templateRef: redis/slave
        inputs:
          - { master: .group.masters.one }


    # Create a failover manager
    - actiontype: CollocatedGroup
      name: sentinel
      depends: { running: [ masters, slaves ] }
      collocatedGroup:
        templateRef: redis/sentinel
        inputs:
          - { master: .group.masters.one }


    # Ingest keys in parallel into different ranges
    - actiontype: CollocatedGroup
      name: loaders
      depends: { running: [ masters, slaves, sentinel ] }
      collocatedGroup:
        templateRef: redis/loader
        inputs:
          - { server: .group.masters.one, recordcount: "100000", offset: "0" }
          - { server: .group.masters.one, recordcount: "100000", offset: "100000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "200000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "300000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "400000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "500000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "600000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "700000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "800000" }
          - { server: .group.masters.one, recordcount: "100000", offset: "900000" }

    # Run queries
    - actiontype: CollocatedGroup
      name: runners
      depends: { running: [ masters, slaves ], success: [ loaders ] }
      collocatedGroup:
        templateRef: redis/runner
        instances: 5
        inputs:
          - { server: .group.masters.one, workload: workloada,  operationcount: "1000000" }



    # Wait until servers are removed
    - actiontype: Wait
      name: "terminate"
      wait:
        success: [ masters ]