apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: redis-experiment
spec:
  importMonitors: [ "sysmon/container", "redismon/telegraf", "ycsbmon/goycsb" ]
  ingress: localhost

  actions:
    # Create Redis nodes
    - actiontype: CollocatedGroup
      name: masters
      collocatedGroup:
        templateRef: rediscluster/master
        inputs:
          - { port: "6379" }
          - { port: "6380" }
          - { port: "6381" }

    # Create redis cluster
    - actiontype: DistributedGroup
      name: boot
      depends: { running: [ masters ] }
      distributedGroup:
        templateRef: rediscluster/bootstrap
        inputs:
          - { servers: .group.masters.all, ports: "6379 6380 6381" }

    # Ingest keys in parallel into different ranges
    - actiontype: DistributedGroup
      name: loaders
      depends: { running: [ masters ],   success: [ boot ], duration: 30s }
      distributedGroup:
        templateRef: rediscluster/loader
        inputs:
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "0" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "100000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "200000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "300000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "400000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "500000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "600000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "700000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "800000" }
          - { server: masters-0, port: "6379", recordcount: "100000", offset: "900000" }

    # Run queries
    - actiontype: DistributedGroup
      name: runners
      depends: { running: [ masters ], success: [ loaders ] }
      distributedGroup:
        templateRef: rediscluster/runner
        instances: 5
        inputs:
          - { server: masters-0, port: "6379", workload: workloada,  operationcount: "1000000" }


    # Wait until servers are removed
    - actiontype: Wait
      name: "teardown"
      wait:
        success: [ runners ]