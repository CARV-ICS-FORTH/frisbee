apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: redis-scaledown
spec:
  importMonitors: [ "sysmon/container", "redismon/telegraf", "ycsbmon/goycsb" ]
  ingress:
    host: localhost
    useAmbassador: true

  actions:
    # Create 3 Redis nodes
    - action: Cluster
      name: masters
      cluster:
        templateRef: rediscluster/master
        instances: 3

    # Run Redis-command to create a cluster from the given nodes
    - action: Service
      name: boot
      depends: { running: [ masters ], duration: 30s }
      service:
        fromTemplate:
          templateRef: rediscluster/bootstrap
          inputs:
            { servers: .cluster.masters.all }


    # Ingest keys in parallel, into different ranges
    - action: Cluster
      name: "loaders"
      depends: { success: [ boot ], running: [ masters ], duration: 30s }
      cluster:
        templateRef: rediscluster/loader
        inputs:
          - { server: .cluster.masters.any, recordcount: "100000000", offset: "0" }
          - { server: .cluster.masters.any, recordcount: "100000000", offset: "100000000" }
          - { server: .cluster.masters.any, recordcount: "100000000", offset: "200000000" }


    # Kill loaders, one every 1 minutes
    - action: Chaos
      name: load-killer
      depends: { running: [ loaders ], duration: 30s }
      chaos:
        type: kill
        kill:
          selector: { macro: .cluster.loaders.any }
          schedule: { cron: "@every 30s" }


    # Kill all masters immediately
    - action: Chaos
      name: master-killer
      depends: { success: [ load-killer ], running: [ masters ] }
      chaos:
        type: kill
        kill:
          selector: { macro: .cluster.masters.any }