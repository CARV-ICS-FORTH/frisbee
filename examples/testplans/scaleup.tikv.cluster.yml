apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: run-tikv-cluster
spec:
  withTelemetry:
    importMonitors: [ "sysmon/container", "ycsbmon/client" ]
    ingress:
      host: platform.science-hangar.eu

  withTestOracle:
    pass: >-
      {{.IsSuccessful "runners"}} == true

  actions:
    # Create a placement driver
    - action: Service
      name: master
      service:
        fromTemplate:
          templateRef: tikv/placementDriver


    # Slow start creating workers.
    - action: Cluster
      depends: { running: [ master ] }
      name: group-a
      cluster:
        templateRef: tikv/worker
        instances: 10
        inputs:
          - { placementDriver: .service.master.any }
        schedule:
          cron: "@every 10s"


    # Add a bunch of nodes
    - action: Cluster
      depends: { running: [ master, group-a ] }
      name: group-b
      cluster:
        templateRef: tikv/worker
        instances: 50
        inputs:
          - { placementDriver: .service.master.any }


    # Add yet another bunch
    - action: Cluster
      depends: { running: [ master, group-b ] }
      name: group-c
      cluster:
        templateRef: tikv/worker
        instances: 50
        inputs:
          - { placementDriver: .service.master.any }


    # Add yet another bigger bunch
    - action: Cluster
      depends: { running: [ master, group-c ] }
      name: group-d
      cluster:
        templateRef: tikv/worker
        instances: 100
        inputs:
          - { placementDriver: .service.master.any }


    # Create a similarly large bunch, but slowly.
    - action: Cluster
      depends: { running: [ master, group-d ] }
      name: group-e
      cluster:
        templateRef: tikv/worker
        instances: 100
        inputs:
          - { placementDriver: .service.master.any }
        schedule:
          cron: "@every 10s"


    # Ingest keys in parallel, into different ranges
#    - action: Cluster
#      name: "loaders"
#      depends: { running: [ master, group-b ] }
#      cluster:
#        templateRef: ycsb-tikv/loader
#        inputs:
#          - { server: .service.master.any, recordcount: "100000", offset: "0" }
#          - { server: .service.master.any, recordcount: "100000", offset: "100000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "200000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "300000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "400000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "500000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "600000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "700000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "800000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "900000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "100000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1100000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1200000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1300000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1400000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1500000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1600000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1700000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "1800000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "190000", threads: "4" }
#          - { server: .service.master.any, recordcount: "100000", offset: "200000", threads: "4" }