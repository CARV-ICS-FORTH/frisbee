# This workflow mimic the official TikV evaluation workflow.
# All the performance parameters (threads, hardware configuration) are copied from:
# https://tikv.org/docs/5.1/deploy/performance/instructions/
#
# All six workloads have a data set which is similar. Workloads D and E insert records during the test run.
# Thus, to keep the database size consistent, we apply the following sequence:
#
# 1) Load the database, using workload A's parameter file (workloads/workloada) and the "-load" switch to the client.
# 2) Run workload A (using workloads/workloada and "-t") for a variety of throughputs.
# 3) Run workload B (using workloads/workloadb and "-t") for a variety of throughputs.
# 4) Run workload C (using workloads/workloadc and "-t") for a variety of throughputs.
# 5) Run workload F (using workloads/workloadf and "-t") for a variety of throughputs.
# 6) Run workload D (using workloads/workloadd and "-t") for a variety of throughputs.
#    This workload inserts records, increasing the size of the database.
# 7) Delete the data in the database.  Otherwise, the remaining data of the cluster might affect the results
#    of the following workload.
# 8) Reload the database, using workload E's parameter file (workloads/workloade) and the "-load switch to the client.
# 9) Run workload E (using workloads/workloadd and "-t") for a variety of throughputs.
# This workload inserts records, increasing the size of the database.
#
# For the deletion, instead of destroying the cluster, we destroy and recreate the cluster.
apiVersion: frisbee.io/v1alpha1
kind: Workflow
metadata:
  name: boot-tikv
spec:
  importMonitors: [ "sysmon/container", "ycsbmon/client" ]
  ingress:
    host: platform.science-hangar.eu

  testOracle:
    pass: >-
      {{.IsSuccessful "workload-e"}} == true

  actions:
    # Step 0: bootstrap.
    # For TiKV, we must first create a placementDriver and then add the workers.
    - action: Service
      name: master
      service:
        fromTemplate:
          templateRef: tikv/placementDriver
          inputs:
            { cpu: "4", memory: "8Gi" }

    - action: Cluster
      depends: { running: [ master ] }
      name: workers
      cluster:
        templateRef: tikv/worker
        instances: 3
        inputs:
          - { placementDriver: .service.master.any,  cpu: "8", memory: "32Gi" }


    # Step 1: Load a new dataset, using the parameters of workload A.
    # We use no throttling to maximize this step and complete it soon.
    - action: Service
      depends: { running: [ workers ] }
      name: loader
      service:
        fromTemplate:
          templateRef: ycsb-tikv/loader
          inputs:
            { server: .service.master.any, workload: workloada, recordcount: "1000000", threads: "400" }

    # Step 2: Run workload A
    - action: Service
      depends: { success: [ loader ] }
      name: workload-a
      service:
        fromTemplate:
          templateRef: ycsb-tikv/runner
          inputs:
            { server: .service.master.any, workload: workloada, operationcount: "1000000",
              cpu: "8",  memory: "8Gi", threads: "40" }

    # Step 3: Run workload B
    - action: Service
      depends: { success: [ workload-a ] }
      name: workload-b
      service:
        fromTemplate:
          templateRef: ycsb-tikv/runner
          inputs:
            { server: .service.master.any, workload: workloadb, operationcount: "1000000",
              cpu: "8",  memory: "8Gi", threads: "40" }

    # Step 4: Run workload C
    - action: Service
      depends: { success: [ workload-b ] }
      name: workload-c
      service:
        fromTemplate:
          templateRef: ycsb-tikv/runner
          inputs:
            { server: .service.master.any, workload: workloadc, operationcount: "1000000",
              cpu: "8",  memory: "8Gi", threads: "40" }


    # Step 5: Run workload F
    - action: Service
      depends: { success: [ workload-c ] }
      name: workload-f
      service:
        fromTemplate:
          templateRef: ycsb-tikv/runner
          inputs:
            { server: .service.master.any, workload: workloadf, operationcount: "1000000",
              cpu: "8",  memory: "8Gi", threads: "40" }


    # Step 6: Run workload D.
    - action: Service
      depends: { success: [ workload-f ] }
      name: workload-d
      service:
        fromTemplate:
          templateRef: ycsb-tikv/runner
          inputs:
            { server: .service.master.any, workload: workloadd, operationcount: "1000000",
              cpu: "8",  memory: "8Gi", threads: "40" }


    # Step 7,8: Reload the data with parameters of workload E.
    # We use the dropdata field to remove all data before test.
    - action: Service
      depends: { success: [ workload-d ] }
      name: reloader
      service:
        fromTemplate:
          templateRef: ycsb-tikv/loader
          inputs:
            { server: .service.master.any, workload: workloade, dropdata: "true", recordcount: "1000000",
              threads: "400" }


    # Step 9:Run workload E
    - action: Service
      depends: { success: [ reloader ] }
      name: workload-e
      service:
        fromTemplate:
          templateRef: ycsb-tikv/runner
          inputs:
            { server: .service.master.any, workload: workloade, operationcount: "1000000",
              cpu: "8",  memory: "8Gi", threads: "40" }


