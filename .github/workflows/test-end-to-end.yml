name: Run Frisbee Scenarios

on:
  workflow_dispatch:
    inputs:
      scenario:
        required: true
        description: The scenario to run.
        default: ./examples/1.hello-world.yml
      charts:
        required: false
        description: Space separated list of dependent Helm Charts required for the Scenario.
        default: ./charts/system

jobs:
  deploy-frisbee:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Cache Frisbee Installation
        id:  cache-microk8s
        uses: actions/cache@v3
        with:
          path: /var/snap/microk8s/
          key: ${{ runner.os }}-microk8s-
          #restore-keys: |
          #  ${{ runner.os }}-microk8s-


      - name: Install MicroK8s
        if: steps.cache-microk8s.outputs.cache-hit != 'true'
        uses: balchua/microk8s-actions@v0.2.2
        with:
          channel: 'latest/stable'
          addons: '["dns", "ingress", "helm3", "rbac"]'


      - name: Install Frisbee
        run: |
          alias kubectl='microk8s kubectl'
          alias helm='microk8s helm3'
                    
          # Install kubectl-frisbee
          ./install.sh 
          
          # Install Frisbee
          ./kubectl-frisbee install production -v=false  
          
          # Wait for the frisbee operator to come-up
          kubectl wait pods -n frisbee -l control-plane=frisbee-operator --for condition=Ready --timeout=90s

      - name: Run Frisbee Scenario
        run: |
          kubectl get pods -A
          
          # Submit the job
          ./kubectl-frisbee submit test demo- ${{ github.event.inputs.scenario }} ${{ github.event.inputs.charts}} \
          --expect-success --timeout=1m
          
          ./kubectl-frisbee get tests

